
Inverted_Pendulum.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003998  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08003b2c  08003b2c  00013b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ba8  08003ba8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003ba8  08003ba8  00013ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003bb0  08003bb0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bb0  08003bb0  00013bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bb4  08003bb4  00013bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003bb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  20000070  08003c28  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  08003c28  000201d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014eb9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024ad  00000000  00000000  00034f59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  00037408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e70  00000000  00000000  00038308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000055e2  00000000  00000000  00039178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011dcb  00000000  00000000  0003e75a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096054  00000000  00000000  00050525  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e6579  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004698  00000000  00000000  000e65cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000070 	.word	0x20000070
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003b14 	.word	0x08003b14

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000074 	.word	0x20000074
 80001d0:	08003b14 	.word	0x08003b14

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fc9e 	bl	8000e10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f828 	bl	8000528 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  HAL_TIM_Base_Start_IT(&htim1);
 80004d8:	4810      	ldr	r0, [pc, #64]	; (800051c <main+0x50>)
 80004da:	f001 fd97 	bl	800200c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80004de:	2100      	movs	r1, #0
 80004e0:	480f      	ldr	r0, [pc, #60]	; (8000520 <main+0x54>)
 80004e2:	f001 fe45 	bl	8002170 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80004e6:	2108      	movs	r1, #8
 80004e8:	480d      	ldr	r0, [pc, #52]	; (8000520 <main+0x54>)
 80004ea:	f001 fe41 	bl	8002170 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80004ee:	210c      	movs	r1, #12
 80004f0:	480b      	ldr	r0, [pc, #44]	; (8000520 <main+0x54>)
 80004f2:	f001 fe3d 	bl	8002170 <HAL_TIM_PWM_Start>
  MX_GPIO_Init();
 80004f6:	f000 f9d7 	bl	80008a8 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 80004fa:	f000 f9a7 	bl	800084c <_ZL19MX_USART2_UART_Initv>
  MX_I2C1_Init();
 80004fe:	f000 f889 	bl	8000614 <_ZL12MX_I2C1_Initv>
  MX_TIM1_Init();
 8000502:	f000 f8bb 	bl	800067c <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 8000506:	f000 f919 	bl	800073c <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN 2 */
  setbuf(stdout, NULL);
 800050a:	4b06      	ldr	r3, [pc, #24]	; (8000524 <main+0x58>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	689b      	ldr	r3, [r3, #8]
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f002 fee8 	bl	80032e8 <setbuf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000518:	e7fe      	b.n	8000518 <main+0x4c>
 800051a:	bf00      	nop
 800051c:	200000e0 	.word	0x200000e0
 8000520:	20000128 	.word	0x20000128
 8000524:	2000000c 	.word	0x2000000c

08000528 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b094      	sub	sp, #80	; 0x50
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 0320 	add.w	r3, r7, #32
 8000532:	2230      	movs	r2, #48	; 0x30
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f002 fece 	bl	80032d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	f107 030c 	add.w	r3, r7, #12
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800054c:	2300      	movs	r3, #0
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	4b2e      	ldr	r3, [pc, #184]	; (800060c <_Z18SystemClock_Configv+0xe4>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	4a2d      	ldr	r2, [pc, #180]	; (800060c <_Z18SystemClock_Configv+0xe4>)
 8000556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055a:	6413      	str	r3, [r2, #64]	; 0x40
 800055c:	4b2b      	ldr	r3, [pc, #172]	; (800060c <_Z18SystemClock_Configv+0xe4>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000568:	2300      	movs	r3, #0
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	4b28      	ldr	r3, [pc, #160]	; (8000610 <_Z18SystemClock_Configv+0xe8>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000574:	4a26      	ldr	r2, [pc, #152]	; (8000610 <_Z18SystemClock_Configv+0xe8>)
 8000576:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800057a:	6013      	str	r3, [r2, #0]
 800057c:	4b24      	ldr	r3, [pc, #144]	; (8000610 <_Z18SystemClock_Configv+0xe8>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000588:	2302      	movs	r3, #2
 800058a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058c:	2301      	movs	r3, #1
 800058e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000590:	2310      	movs	r3, #16
 8000592:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000594:	2302      	movs	r3, #2
 8000596:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000598:	2300      	movs	r3, #0
 800059a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800059c:	2310      	movs	r3, #16
 800059e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005a0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005a6:	2304      	movs	r3, #4
 80005a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005aa:	2307      	movs	r3, #7
 80005ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ae:	f107 0320 	add.w	r3, r7, #32
 80005b2:	4618      	mov	r0, r3
 80005b4:	f001 f866 	bl	8001684 <HAL_RCC_OscConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	bf14      	ite	ne
 80005be:	2301      	movne	r3, #1
 80005c0:	2300      	moveq	r3, #0
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
 80005c8:	f000 f9f0 	bl	80009ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005cc:	230f      	movs	r3, #15
 80005ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d0:	2302      	movs	r3, #2
 80005d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005e2:	f107 030c 	add.w	r3, r7, #12
 80005e6:	2102      	movs	r1, #2
 80005e8:	4618      	mov	r0, r3
 80005ea:	f001 fac3 	bl	8001b74 <HAL_RCC_ClockConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	bf14      	ite	ne
 80005f4:	2301      	movne	r3, #1
 80005f6:	2300      	moveq	r3, #0
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 80005fe:	f000 f9d5 	bl	80009ac <Error_Handler>
  }
}
 8000602:	bf00      	nop
 8000604:	3750      	adds	r7, #80	; 0x50
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40023800 	.word	0x40023800
 8000610:	40007000 	.word	0x40007000

08000614 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000618:	4b15      	ldr	r3, [pc, #84]	; (8000670 <_ZL12MX_I2C1_Initv+0x5c>)
 800061a:	4a16      	ldr	r2, [pc, #88]	; (8000674 <_ZL12MX_I2C1_Initv+0x60>)
 800061c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800061e:	4b14      	ldr	r3, [pc, #80]	; (8000670 <_ZL12MX_I2C1_Initv+0x5c>)
 8000620:	4a15      	ldr	r2, [pc, #84]	; (8000678 <_ZL12MX_I2C1_Initv+0x64>)
 8000622:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <_ZL12MX_I2C1_Initv+0x5c>)
 8000626:	2200      	movs	r2, #0
 8000628:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800062a:	4b11      	ldr	r3, [pc, #68]	; (8000670 <_ZL12MX_I2C1_Initv+0x5c>)
 800062c:	2200      	movs	r2, #0
 800062e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000630:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <_ZL12MX_I2C1_Initv+0x5c>)
 8000632:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000636:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000638:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <_ZL12MX_I2C1_Initv+0x5c>)
 800063a:	2200      	movs	r2, #0
 800063c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800063e:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <_ZL12MX_I2C1_Initv+0x5c>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000644:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <_ZL12MX_I2C1_Initv+0x5c>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800064a:	4b09      	ldr	r3, [pc, #36]	; (8000670 <_ZL12MX_I2C1_Initv+0x5c>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000650:	4807      	ldr	r0, [pc, #28]	; (8000670 <_ZL12MX_I2C1_Initv+0x5c>)
 8000652:	f000 fed3 	bl	80013fc <HAL_I2C_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	bf14      	ite	ne
 800065c:	2301      	movne	r3, #1
 800065e:	2300      	moveq	r3, #0
 8000660:	b2db      	uxtb	r3, r3
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8000666:	f000 f9a1 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	2000008c 	.word	0x2000008c
 8000674:	40005400 	.word	0x40005400
 8000678:	000186a0 	.word	0x000186a0

0800067c <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000682:	f107 0308 	add.w	r3, r7, #8
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000690:	463b      	mov	r3, r7
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000698:	4b26      	ldr	r3, [pc, #152]	; (8000734 <_ZL12MX_TIM1_Initv+0xb8>)
 800069a:	4a27      	ldr	r2, [pc, #156]	; (8000738 <_ZL12MX_TIM1_Initv+0xbc>)
 800069c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800069e:	4b25      	ldr	r3, [pc, #148]	; (8000734 <_ZL12MX_TIM1_Initv+0xb8>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a4:	4b23      	ldr	r3, [pc, #140]	; (8000734 <_ZL12MX_TIM1_Initv+0xb8>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80006aa:	4b22      	ldr	r3, [pc, #136]	; (8000734 <_ZL12MX_TIM1_Initv+0xb8>)
 80006ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b2:	4b20      	ldr	r3, [pc, #128]	; (8000734 <_ZL12MX_TIM1_Initv+0xb8>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006b8:	4b1e      	ldr	r3, [pc, #120]	; (8000734 <_ZL12MX_TIM1_Initv+0xb8>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006be:	4b1d      	ldr	r3, [pc, #116]	; (8000734 <_ZL12MX_TIM1_Initv+0xb8>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006c4:	481b      	ldr	r0, [pc, #108]	; (8000734 <_ZL12MX_TIM1_Initv+0xb8>)
 80006c6:	f001 fc51 	bl	8001f6c <HAL_TIM_Base_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	bf14      	ite	ne
 80006d0:	2301      	movne	r3, #1
 80006d2:	2300      	moveq	r3, #0
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <_ZL12MX_TIM1_Initv+0x62>
  {
    Error_Handler();
 80006da:	f000 f967 	bl	80009ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006e4:	f107 0308 	add.w	r3, r7, #8
 80006e8:	4619      	mov	r1, r3
 80006ea:	4812      	ldr	r0, [pc, #72]	; (8000734 <_ZL12MX_TIM1_Initv+0xb8>)
 80006ec:	f001 feb2 	bl	8002454 <HAL_TIM_ConfigClockSource>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	bf14      	ite	ne
 80006f6:	2301      	movne	r3, #1
 80006f8:	2300      	moveq	r3, #0
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <_ZL12MX_TIM1_Initv+0x88>
  {
    Error_Handler();
 8000700:	f000 f954 	bl	80009ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000704:	2300      	movs	r3, #0
 8000706:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000708:	2300      	movs	r3, #0
 800070a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800070c:	463b      	mov	r3, r7
 800070e:	4619      	mov	r1, r3
 8000710:	4808      	ldr	r0, [pc, #32]	; (8000734 <_ZL12MX_TIM1_Initv+0xb8>)
 8000712:	f002 fa33 	bl	8002b7c <HAL_TIMEx_MasterConfigSynchronization>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	bf14      	ite	ne
 800071c:	2301      	movne	r3, #1
 800071e:	2300      	moveq	r3, #0
 8000720:	b2db      	uxtb	r3, r3
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <_ZL12MX_TIM1_Initv+0xae>
  {
    Error_Handler();
 8000726:	f000 f941 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	3718      	adds	r7, #24
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	200000e0 	.word	0x200000e0
 8000738:	40010000 	.word	0x40010000

0800073c <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08a      	sub	sp, #40	; 0x28
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000742:	f107 0320 	add.w	r3, r7, #32
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]
 800075a:	615a      	str	r2, [r3, #20]
 800075c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800075e:	4b39      	ldr	r3, [pc, #228]	; (8000844 <_ZL12MX_TIM3_Initv+0x108>)
 8000760:	4a39      	ldr	r2, [pc, #228]	; (8000848 <_ZL12MX_TIM3_Initv+0x10c>)
 8000762:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000764:	4b37      	ldr	r3, [pc, #220]	; (8000844 <_ZL12MX_TIM3_Initv+0x108>)
 8000766:	2200      	movs	r2, #0
 8000768:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800076a:	4b36      	ldr	r3, [pc, #216]	; (8000844 <_ZL12MX_TIM3_Initv+0x108>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000770:	4b34      	ldr	r3, [pc, #208]	; (8000844 <_ZL12MX_TIM3_Initv+0x108>)
 8000772:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000776:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000778:	4b32      	ldr	r3, [pc, #200]	; (8000844 <_ZL12MX_TIM3_Initv+0x108>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800077e:	4b31      	ldr	r3, [pc, #196]	; (8000844 <_ZL12MX_TIM3_Initv+0x108>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000784:	482f      	ldr	r0, [pc, #188]	; (8000844 <_ZL12MX_TIM3_Initv+0x108>)
 8000786:	f001 fca3 	bl	80020d0 <HAL_TIM_PWM_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	bf14      	ite	ne
 8000790:	2301      	movne	r3, #1
 8000792:	2300      	moveq	r3, #0
 8000794:	b2db      	uxtb	r3, r3
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 800079a:	f000 f907 	bl	80009ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800079e:	2300      	movs	r3, #0
 80007a0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a2:	2300      	movs	r3, #0
 80007a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007a6:	f107 0320 	add.w	r3, r7, #32
 80007aa:	4619      	mov	r1, r3
 80007ac:	4825      	ldr	r0, [pc, #148]	; (8000844 <_ZL12MX_TIM3_Initv+0x108>)
 80007ae:	f002 f9e5 	bl	8002b7c <HAL_TIMEx_MasterConfigSynchronization>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	bf14      	ite	ne
 80007b8:	2301      	movne	r3, #1
 80007ba:	2300      	moveq	r3, #0
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 80007c2:	f000 f8f3 	bl	80009ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007c6:	2360      	movs	r3, #96	; 0x60
 80007c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	2200      	movs	r2, #0
 80007da:	4619      	mov	r1, r3
 80007dc:	4819      	ldr	r0, [pc, #100]	; (8000844 <_ZL12MX_TIM3_Initv+0x108>)
 80007de:	f001 fd77 	bl	80022d0 <HAL_TIM_PWM_ConfigChannel>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	bf14      	ite	ne
 80007e8:	2301      	movne	r3, #1
 80007ea:	2300      	moveq	r3, #0
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 80007f2:	f000 f8db 	bl	80009ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	2208      	movs	r2, #8
 80007fa:	4619      	mov	r1, r3
 80007fc:	4811      	ldr	r0, [pc, #68]	; (8000844 <_ZL12MX_TIM3_Initv+0x108>)
 80007fe:	f001 fd67 	bl	80022d0 <HAL_TIM_PWM_ConfigChannel>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	bf14      	ite	ne
 8000808:	2301      	movne	r3, #1
 800080a:	2300      	moveq	r3, #0
 800080c:	b2db      	uxtb	r3, r3
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 8000812:	f000 f8cb 	bl	80009ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	220c      	movs	r2, #12
 800081a:	4619      	mov	r1, r3
 800081c:	4809      	ldr	r0, [pc, #36]	; (8000844 <_ZL12MX_TIM3_Initv+0x108>)
 800081e:	f001 fd57 	bl	80022d0 <HAL_TIM_PWM_ConfigChannel>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	bf14      	ite	ne
 8000828:	2301      	movne	r3, #1
 800082a:	2300      	moveq	r3, #0
 800082c:	b2db      	uxtb	r3, r3
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <_ZL12MX_TIM3_Initv+0xfa>
  {
    Error_Handler();
 8000832:	f000 f8bb 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000836:	4803      	ldr	r0, [pc, #12]	; (8000844 <_ZL12MX_TIM3_Initv+0x108>)
 8000838:	f000 f972 	bl	8000b20 <HAL_TIM_MspPostInit>

}
 800083c:	bf00      	nop
 800083e:	3728      	adds	r7, #40	; 0x28
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000128 	.word	0x20000128
 8000848:	40000400 	.word	0x40000400

0800084c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000850:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000852:	4a14      	ldr	r2, [pc, #80]	; (80008a4 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000854:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000856:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000858:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800085c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800085e:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000864:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000870:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000872:	220c      	movs	r2, #12
 8000874:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000876:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800087c:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000882:	4807      	ldr	r0, [pc, #28]	; (80008a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000884:	f002 f9e8 	bl	8002c58 <HAL_UART_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	bf14      	ite	ne
 800088e:	2301      	movne	r3, #1
 8000890:	2300      	moveq	r3, #0
 8000892:	b2db      	uxtb	r3, r3
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8000898:	f000 f888 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000170 	.word	0x20000170
 80008a4:	40004400 	.word	0x40004400

080008a8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	; 0x28
 80008ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
 80008c2:	4b37      	ldr	r3, [pc, #220]	; (80009a0 <_ZL12MX_GPIO_Initv+0xf8>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a36      	ldr	r2, [pc, #216]	; (80009a0 <_ZL12MX_GPIO_Initv+0xf8>)
 80008c8:	f043 0304 	orr.w	r3, r3, #4
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b34      	ldr	r3, [pc, #208]	; (80009a0 <_ZL12MX_GPIO_Initv+0xf8>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0304 	and.w	r3, r3, #4
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	4b30      	ldr	r3, [pc, #192]	; (80009a0 <_ZL12MX_GPIO_Initv+0xf8>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a2f      	ldr	r2, [pc, #188]	; (80009a0 <_ZL12MX_GPIO_Initv+0xf8>)
 80008e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b2d      	ldr	r3, [pc, #180]	; (80009a0 <_ZL12MX_GPIO_Initv+0xf8>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	4b29      	ldr	r3, [pc, #164]	; (80009a0 <_ZL12MX_GPIO_Initv+0xf8>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a28      	ldr	r2, [pc, #160]	; (80009a0 <_ZL12MX_GPIO_Initv+0xf8>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b26      	ldr	r3, [pc, #152]	; (80009a0 <_ZL12MX_GPIO_Initv+0xf8>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	4b22      	ldr	r3, [pc, #136]	; (80009a0 <_ZL12MX_GPIO_Initv+0xf8>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a21      	ldr	r2, [pc, #132]	; (80009a0 <_ZL12MX_GPIO_Initv+0xf8>)
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b1f      	ldr	r3, [pc, #124]	; (80009a0 <_ZL12MX_GPIO_Initv+0xf8>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	2107      	movs	r1, #7
 8000932:	481c      	ldr	r0, [pc, #112]	; (80009a4 <_ZL12MX_GPIO_Initv+0xfc>)
 8000934:	f000 fd48 	bl	80013c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	2120      	movs	r1, #32
 800093c:	481a      	ldr	r0, [pc, #104]	; (80009a8 <_ZL12MX_GPIO_Initv+0x100>)
 800093e:	f000 fd43 	bl	80013c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000942:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000946:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000948:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800094c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	4619      	mov	r1, r3
 8000958:	4812      	ldr	r0, [pc, #72]	; (80009a4 <_ZL12MX_GPIO_Initv+0xfc>)
 800095a:	f000 fbb1 	bl	80010c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800095e:	2307      	movs	r3, #7
 8000960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000962:	2301      	movs	r3, #1
 8000964:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	4619      	mov	r1, r3
 8000974:	480b      	ldr	r0, [pc, #44]	; (80009a4 <_ZL12MX_GPIO_Initv+0xfc>)
 8000976:	f000 fba3 	bl	80010c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800097a:	2320      	movs	r3, #32
 800097c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097e:	2301      	movs	r3, #1
 8000980:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	4619      	mov	r1, r3
 8000990:	4805      	ldr	r0, [pc, #20]	; (80009a8 <_ZL12MX_GPIO_Initv+0x100>)
 8000992:	f000 fb95 	bl	80010c0 <HAL_GPIO_Init>

}
 8000996:	bf00      	nop
 8000998:	3728      	adds	r7, #40	; 0x28
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40020800 	.word	0x40020800
 80009a8:	40020000 	.word	0x40020000

080009ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b0:	b672      	cpsid	i
}
 80009b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <Error_Handler+0x8>
	...

080009b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <HAL_MspInit+0x4c>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c6:	4a0f      	ldr	r2, [pc, #60]	; (8000a04 <HAL_MspInit+0x4c>)
 80009c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009cc:	6453      	str	r3, [r2, #68]	; 0x44
 80009ce:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <HAL_MspInit+0x4c>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	603b      	str	r3, [r7, #0]
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <HAL_MspInit+0x4c>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	4a08      	ldr	r2, [pc, #32]	; (8000a04 <HAL_MspInit+0x4c>)
 80009e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <HAL_MspInit+0x4c>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f2:	603b      	str	r3, [r7, #0]
 80009f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009f6:	2007      	movs	r0, #7
 80009f8:	f000 fb2e 	bl	8001058 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fc:	bf00      	nop
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40023800 	.word	0x40023800

08000a08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	; 0x28
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a19      	ldr	r2, [pc, #100]	; (8000a8c <HAL_I2C_MspInit+0x84>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d12c      	bne.n	8000a84 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	613b      	str	r3, [r7, #16]
 8000a2e:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <HAL_I2C_MspInit+0x88>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a17      	ldr	r2, [pc, #92]	; (8000a90 <HAL_I2C_MspInit+0x88>)
 8000a34:	f043 0302 	orr.w	r3, r3, #2
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <HAL_I2C_MspInit+0x88>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0302 	and.w	r3, r3, #2
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a4c:	2312      	movs	r3, #18
 8000a4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a54:	2303      	movs	r3, #3
 8000a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a58:	2304      	movs	r3, #4
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4619      	mov	r1, r3
 8000a62:	480c      	ldr	r0, [pc, #48]	; (8000a94 <HAL_I2C_MspInit+0x8c>)
 8000a64:	f000 fb2c 	bl	80010c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <HAL_I2C_MspInit+0x88>)
 8000a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a70:	4a07      	ldr	r2, [pc, #28]	; (8000a90 <HAL_I2C_MspInit+0x88>)
 8000a72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a76:	6413      	str	r3, [r2, #64]	; 0x40
 8000a78:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <HAL_I2C_MspInit+0x88>)
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a84:	bf00      	nop
 8000a86:	3728      	adds	r7, #40	; 0x28
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40005400 	.word	0x40005400
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40020400 	.word	0x40020400

08000a98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a0b      	ldr	r2, [pc, #44]	; (8000ad4 <HAL_TIM_Base_MspInit+0x3c>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d10d      	bne.n	8000ac6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <HAL_TIM_Base_MspInit+0x40>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	4a09      	ldr	r2, [pc, #36]	; (8000ad8 <HAL_TIM_Base_MspInit+0x40>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aba:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <HAL_TIM_Base_MspInit+0x40>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000ac6:	bf00      	nop
 8000ac8:	3714      	adds	r7, #20
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	40010000 	.word	0x40010000
 8000ad8:	40023800 	.word	0x40023800

08000adc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a0b      	ldr	r2, [pc, #44]	; (8000b18 <HAL_TIM_PWM_MspInit+0x3c>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d10d      	bne.n	8000b0a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <HAL_TIM_PWM_MspInit+0x40>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	4a09      	ldr	r2, [pc, #36]	; (8000b1c <HAL_TIM_PWM_MspInit+0x40>)
 8000af8:	f043 0302 	orr.w	r3, r3, #2
 8000afc:	6413      	str	r3, [r2, #64]	; 0x40
 8000afe:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <HAL_TIM_PWM_MspInit+0x40>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	f003 0302 	and.w	r3, r3, #2
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b0a:	bf00      	nop
 8000b0c:	3714      	adds	r7, #20
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	40000400 	.word	0x40000400
 8000b1c:	40023800 	.word	0x40023800

08000b20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b088      	sub	sp, #32
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 030c 	add.w	r3, r7, #12
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a12      	ldr	r2, [pc, #72]	; (8000b88 <HAL_TIM_MspPostInit+0x68>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d11e      	bne.n	8000b80 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <HAL_TIM_MspPostInit+0x6c>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a10      	ldr	r2, [pc, #64]	; (8000b8c <HAL_TIM_MspPostInit+0x6c>)
 8000b4c:	f043 0304 	orr.w	r3, r3, #4
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <HAL_TIM_MspPostInit+0x6c>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0304 	and.w	r3, r3, #4
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8000b5e:	f44f 7350 	mov.w	r3, #832	; 0x340
 8000b62:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b64:	2302      	movs	r3, #2
 8000b66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b70:	2302      	movs	r3, #2
 8000b72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b74:	f107 030c 	add.w	r3, r7, #12
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4805      	ldr	r0, [pc, #20]	; (8000b90 <HAL_TIM_MspPostInit+0x70>)
 8000b7c:	f000 faa0 	bl	80010c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000b80:	bf00      	nop
 8000b82:	3720      	adds	r7, #32
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40000400 	.word	0x40000400
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020800 	.word	0x40020800

08000b94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08a      	sub	sp, #40	; 0x28
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a19      	ldr	r2, [pc, #100]	; (8000c18 <HAL_UART_MspInit+0x84>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d12b      	bne.n	8000c0e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <HAL_UART_MspInit+0x88>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	4a17      	ldr	r2, [pc, #92]	; (8000c1c <HAL_UART_MspInit+0x88>)
 8000bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <HAL_UART_MspInit+0x88>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <HAL_UART_MspInit+0x88>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a10      	ldr	r2, [pc, #64]	; (8000c1c <HAL_UART_MspInit+0x88>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <HAL_UART_MspInit+0x88>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bee:	230c      	movs	r3, #12
 8000bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bfe:	2307      	movs	r3, #7
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c02:	f107 0314 	add.w	r3, r7, #20
 8000c06:	4619      	mov	r1, r3
 8000c08:	4805      	ldr	r0, [pc, #20]	; (8000c20 <HAL_UART_MspInit+0x8c>)
 8000c0a:	f000 fa59 	bl	80010c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c0e:	bf00      	nop
 8000c10:	3728      	adds	r7, #40	; 0x28
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40004400 	.word	0x40004400
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40020000 	.word	0x40020000

08000c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <NMI_Handler+0x4>

08000c2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <HardFault_Handler+0x4>

08000c30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <MemManage_Handler+0x4>

08000c36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c3a:	e7fe      	b.n	8000c3a <BusFault_Handler+0x4>

08000c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <UsageFault_Handler+0x4>

08000c42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c70:	f000 f920 	bl	8000eb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]
 8000c88:	e00a      	b.n	8000ca0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c8a:	f3af 8000 	nop.w
 8000c8e:	4601      	mov	r1, r0
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	1c5a      	adds	r2, r3, #1
 8000c94:	60ba      	str	r2, [r7, #8]
 8000c96:	b2ca      	uxtb	r2, r1
 8000c98:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	697a      	ldr	r2, [r7, #20]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	dbf0      	blt.n	8000c8a <_read+0x12>
	}

return len;
 8000ca8:	687b      	ldr	r3, [r7, #4]
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3718      	adds	r7, #24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <_close>:
//	}
//	return len;
//}

int _close(int file)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	b083      	sub	sp, #12
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
	return -1;
 8000cba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	b083      	sub	sp, #12
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
 8000cd2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cda:	605a      	str	r2, [r3, #4]
	return 0;
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <_lseek>:
{
	return 1;
}

int _lseek(int file, int ptr, int dir)
{
 8000cea:	b480      	push	{r7}
 8000cec:	b085      	sub	sp, #20
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	60f8      	str	r0, [r7, #12]
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	607a      	str	r2, [r7, #4]
	return 0;
 8000cf6:	2300      	movs	r3, #0
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <_write>:
{
	errno = ENOMEM;
	return -1;
}

int _write(int file, char *ptr, int len) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, 10);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	b29a      	uxth	r2, r3
 8000d14:	230a      	movs	r3, #10
 8000d16:	68b9      	ldr	r1, [r7, #8]
 8000d18:	4803      	ldr	r0, [pc, #12]	; (8000d28 <_write+0x24>)
 8000d1a:	f001 ffea 	bl	8002cf2 <HAL_UART_Transmit>
	return len;
 8000d1e:	687b      	ldr	r3, [r7, #4]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000170 	.word	0x20000170

08000d2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d34:	4a14      	ldr	r2, [pc, #80]	; (8000d88 <_sbrk+0x5c>)
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <_sbrk+0x60>)
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d40:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <_sbrk+0x64>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d102      	bne.n	8000d4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d48:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <_sbrk+0x64>)
 8000d4a:	4a12      	ldr	r2, [pc, #72]	; (8000d94 <_sbrk+0x68>)
 8000d4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d4e:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <_sbrk+0x64>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4413      	add	r3, r2
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d207      	bcs.n	8000d6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d5c:	f002 fa92 	bl	8003284 <__errno>
 8000d60:	4603      	mov	r3, r0
 8000d62:	220c      	movs	r2, #12
 8000d64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d6a:	e009      	b.n	8000d80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d6c:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <_sbrk+0x64>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d72:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <_sbrk+0x64>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	4a05      	ldr	r2, [pc, #20]	; (8000d90 <_sbrk+0x64>)
 8000d7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3718      	adds	r7, #24
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20018000 	.word	0x20018000
 8000d8c:	00000400 	.word	0x00000400
 8000d90:	200001b4 	.word	0x200001b4
 8000d94:	200001d8 	.word	0x200001d8

08000d98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <SystemInit+0x20>)
 8000d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000da2:	4a05      	ldr	r2, [pc, #20]	; (8000db8 <SystemInit+0x20>)
 8000da4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dc0:	480d      	ldr	r0, [pc, #52]	; (8000df8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dc2:	490e      	ldr	r1, [pc, #56]	; (8000dfc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dc4:	4a0e      	ldr	r2, [pc, #56]	; (8000e00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc8:	e002      	b.n	8000dd0 <LoopCopyDataInit>

08000dca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dce:	3304      	adds	r3, #4

08000dd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd4:	d3f9      	bcc.n	8000dca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd6:	4a0b      	ldr	r2, [pc, #44]	; (8000e04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dd8:	4c0b      	ldr	r4, [pc, #44]	; (8000e08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ddc:	e001      	b.n	8000de2 <LoopFillZerobss>

08000dde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de0:	3204      	adds	r2, #4

08000de2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de4:	d3fb      	bcc.n	8000dde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000de6:	f7ff ffd7 	bl	8000d98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dea:	f002 fa51 	bl	8003290 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dee:	f7ff fb6d 	bl	80004cc <main>
  bx  lr    
 8000df2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000df4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dfc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e00:	08003bb8 	.word	0x08003bb8
  ldr r2, =_sbss
 8000e04:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e08:	200001d4 	.word	0x200001d4

08000e0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e0c:	e7fe      	b.n	8000e0c <ADC_IRQHandler>
	...

08000e10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e14:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <HAL_Init+0x40>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a0d      	ldr	r2, [pc, #52]	; (8000e50 <HAL_Init+0x40>)
 8000e1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e20:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <HAL_Init+0x40>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a0a      	ldr	r2, [pc, #40]	; (8000e50 <HAL_Init+0x40>)
 8000e26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <HAL_Init+0x40>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a07      	ldr	r2, [pc, #28]	; (8000e50 <HAL_Init+0x40>)
 8000e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e38:	2003      	movs	r0, #3
 8000e3a:	f000 f90d 	bl	8001058 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f000 f808 	bl	8000e54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e44:	f7ff fdb8 	bl	80009b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40023c00 	.word	0x40023c00

08000e54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e5c:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <HAL_InitTick+0x54>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	4b12      	ldr	r3, [pc, #72]	; (8000eac <HAL_InitTick+0x58>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	4619      	mov	r1, r3
 8000e66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e72:	4618      	mov	r0, r3
 8000e74:	f000 f917 	bl	80010a6 <HAL_SYSTICK_Config>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e00e      	b.n	8000ea0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2b0f      	cmp	r3, #15
 8000e86:	d80a      	bhi.n	8000e9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	6879      	ldr	r1, [r7, #4]
 8000e8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e90:	f000 f8ed 	bl	800106e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e94:	4a06      	ldr	r2, [pc, #24]	; (8000eb0 <HAL_InitTick+0x5c>)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	e000      	b.n	8000ea0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	20000008 	.word	0x20000008
 8000eb0:	20000004 	.word	0x20000004

08000eb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_IncTick+0x20>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_IncTick+0x24>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <HAL_IncTick+0x24>)
 8000ec6:	6013      	str	r3, [r2, #0]
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	20000008 	.word	0x20000008
 8000ed8:	200001c0 	.word	0x200001c0

08000edc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee0:	4b03      	ldr	r3, [pc, #12]	; (8000ef0 <HAL_GetTick+0x14>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	200001c0 	.word	0x200001c0

08000ef4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <__NVIC_SetPriorityGrouping+0x44>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f0a:	68ba      	ldr	r2, [r7, #8]
 8000f0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f10:	4013      	ands	r3, r2
 8000f12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f26:	4a04      	ldr	r2, [pc, #16]	; (8000f38 <__NVIC_SetPriorityGrouping+0x44>)
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	60d3      	str	r3, [r2, #12]
}
 8000f2c:	bf00      	nop
 8000f2e:	3714      	adds	r7, #20
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f40:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <__NVIC_GetPriorityGrouping+0x18>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	0a1b      	lsrs	r3, r3, #8
 8000f46:	f003 0307 	and.w	r3, r3, #7
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	6039      	str	r1, [r7, #0]
 8000f62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	db0a      	blt.n	8000f82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	490c      	ldr	r1, [pc, #48]	; (8000fa4 <__NVIC_SetPriority+0x4c>)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	0112      	lsls	r2, r2, #4
 8000f78:	b2d2      	uxtb	r2, r2
 8000f7a:	440b      	add	r3, r1
 8000f7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f80:	e00a      	b.n	8000f98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	4908      	ldr	r1, [pc, #32]	; (8000fa8 <__NVIC_SetPriority+0x50>)
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	f003 030f 	and.w	r3, r3, #15
 8000f8e:	3b04      	subs	r3, #4
 8000f90:	0112      	lsls	r2, r2, #4
 8000f92:	b2d2      	uxtb	r2, r2
 8000f94:	440b      	add	r3, r1
 8000f96:	761a      	strb	r2, [r3, #24]
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000e100 	.word	0xe000e100
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b089      	sub	sp, #36	; 0x24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	f1c3 0307 	rsb	r3, r3, #7
 8000fc6:	2b04      	cmp	r3, #4
 8000fc8:	bf28      	it	cs
 8000fca:	2304      	movcs	r3, #4
 8000fcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	2b06      	cmp	r3, #6
 8000fd4:	d902      	bls.n	8000fdc <NVIC_EncodePriority+0x30>
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3b03      	subs	r3, #3
 8000fda:	e000      	b.n	8000fde <NVIC_EncodePriority+0x32>
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43da      	mvns	r2, r3
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	401a      	ands	r2, r3
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffe:	43d9      	mvns	r1, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001004:	4313      	orrs	r3, r2
         );
}
 8001006:	4618      	mov	r0, r3
 8001008:	3724      	adds	r7, #36	; 0x24
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
	...

08001014 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3b01      	subs	r3, #1
 8001020:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001024:	d301      	bcc.n	800102a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001026:	2301      	movs	r3, #1
 8001028:	e00f      	b.n	800104a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800102a:	4a0a      	ldr	r2, [pc, #40]	; (8001054 <SysTick_Config+0x40>)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3b01      	subs	r3, #1
 8001030:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001032:	210f      	movs	r1, #15
 8001034:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001038:	f7ff ff8e 	bl	8000f58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800103c:	4b05      	ldr	r3, [pc, #20]	; (8001054 <SysTick_Config+0x40>)
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001042:	4b04      	ldr	r3, [pc, #16]	; (8001054 <SysTick_Config+0x40>)
 8001044:	2207      	movs	r2, #7
 8001046:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	e000e010 	.word	0xe000e010

08001058 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff ff47 	bl	8000ef4 <__NVIC_SetPriorityGrouping>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800106e:	b580      	push	{r7, lr}
 8001070:	b086      	sub	sp, #24
 8001072:	af00      	add	r7, sp, #0
 8001074:	4603      	mov	r3, r0
 8001076:	60b9      	str	r1, [r7, #8]
 8001078:	607a      	str	r2, [r7, #4]
 800107a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001080:	f7ff ff5c 	bl	8000f3c <__NVIC_GetPriorityGrouping>
 8001084:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	68b9      	ldr	r1, [r7, #8]
 800108a:	6978      	ldr	r0, [r7, #20]
 800108c:	f7ff ff8e 	bl	8000fac <NVIC_EncodePriority>
 8001090:	4602      	mov	r2, r0
 8001092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001096:	4611      	mov	r1, r2
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ff5d 	bl	8000f58 <__NVIC_SetPriority>
}
 800109e:	bf00      	nop
 80010a0:	3718      	adds	r7, #24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff ffb0 	bl	8001014 <SysTick_Config>
 80010b4:	4603      	mov	r3, r0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b089      	sub	sp, #36	; 0x24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]
 80010da:	e159      	b.n	8001390 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010dc:	2201      	movs	r2, #1
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	697a      	ldr	r2, [r7, #20]
 80010ec:	4013      	ands	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	f040 8148 	bne.w	800138a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f003 0303 	and.w	r3, r3, #3
 8001102:	2b01      	cmp	r3, #1
 8001104:	d005      	beq.n	8001112 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800110e:	2b02      	cmp	r3, #2
 8001110:	d130      	bne.n	8001174 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	2203      	movs	r2, #3
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4013      	ands	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	68da      	ldr	r2, [r3, #12]
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4313      	orrs	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001148:	2201      	movs	r2, #1
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4013      	ands	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	091b      	lsrs	r3, r3, #4
 800115e:	f003 0201 	and.w	r2, r3, #1
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f003 0303 	and.w	r3, r3, #3
 800117c:	2b03      	cmp	r3, #3
 800117e:	d017      	beq.n	80011b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	2203      	movs	r2, #3
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	689a      	ldr	r2, [r3, #8]
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 0303 	and.w	r3, r3, #3
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d123      	bne.n	8001204 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	08da      	lsrs	r2, r3, #3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3208      	adds	r2, #8
 80011c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	f003 0307 	and.w	r3, r3, #7
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	220f      	movs	r2, #15
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4013      	ands	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	691a      	ldr	r2, [r3, #16]
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	08da      	lsrs	r2, r3, #3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	3208      	adds	r2, #8
 80011fe:	69b9      	ldr	r1, [r7, #24]
 8001200:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	2203      	movs	r2, #3
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4013      	ands	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 0203 	and.w	r2, r3, #3
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4313      	orrs	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001240:	2b00      	cmp	r3, #0
 8001242:	f000 80a2 	beq.w	800138a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	4b57      	ldr	r3, [pc, #348]	; (80013a8 <HAL_GPIO_Init+0x2e8>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124e:	4a56      	ldr	r2, [pc, #344]	; (80013a8 <HAL_GPIO_Init+0x2e8>)
 8001250:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001254:	6453      	str	r3, [r2, #68]	; 0x44
 8001256:	4b54      	ldr	r3, [pc, #336]	; (80013a8 <HAL_GPIO_Init+0x2e8>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001262:	4a52      	ldr	r2, [pc, #328]	; (80013ac <HAL_GPIO_Init+0x2ec>)
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	089b      	lsrs	r3, r3, #2
 8001268:	3302      	adds	r3, #2
 800126a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	f003 0303 	and.w	r3, r3, #3
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	220f      	movs	r2, #15
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43db      	mvns	r3, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4013      	ands	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a49      	ldr	r2, [pc, #292]	; (80013b0 <HAL_GPIO_Init+0x2f0>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d019      	beq.n	80012c2 <HAL_GPIO_Init+0x202>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a48      	ldr	r2, [pc, #288]	; (80013b4 <HAL_GPIO_Init+0x2f4>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d013      	beq.n	80012be <HAL_GPIO_Init+0x1fe>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a47      	ldr	r2, [pc, #284]	; (80013b8 <HAL_GPIO_Init+0x2f8>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d00d      	beq.n	80012ba <HAL_GPIO_Init+0x1fa>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a46      	ldr	r2, [pc, #280]	; (80013bc <HAL_GPIO_Init+0x2fc>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d007      	beq.n	80012b6 <HAL_GPIO_Init+0x1f6>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a45      	ldr	r2, [pc, #276]	; (80013c0 <HAL_GPIO_Init+0x300>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d101      	bne.n	80012b2 <HAL_GPIO_Init+0x1f2>
 80012ae:	2304      	movs	r3, #4
 80012b0:	e008      	b.n	80012c4 <HAL_GPIO_Init+0x204>
 80012b2:	2307      	movs	r3, #7
 80012b4:	e006      	b.n	80012c4 <HAL_GPIO_Init+0x204>
 80012b6:	2303      	movs	r3, #3
 80012b8:	e004      	b.n	80012c4 <HAL_GPIO_Init+0x204>
 80012ba:	2302      	movs	r3, #2
 80012bc:	e002      	b.n	80012c4 <HAL_GPIO_Init+0x204>
 80012be:	2301      	movs	r3, #1
 80012c0:	e000      	b.n	80012c4 <HAL_GPIO_Init+0x204>
 80012c2:	2300      	movs	r3, #0
 80012c4:	69fa      	ldr	r2, [r7, #28]
 80012c6:	f002 0203 	and.w	r2, r2, #3
 80012ca:	0092      	lsls	r2, r2, #2
 80012cc:	4093      	lsls	r3, r2
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012d4:	4935      	ldr	r1, [pc, #212]	; (80013ac <HAL_GPIO_Init+0x2ec>)
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	089b      	lsrs	r3, r3, #2
 80012da:	3302      	adds	r3, #2
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012e2:	4b38      	ldr	r3, [pc, #224]	; (80013c4 <HAL_GPIO_Init+0x304>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	43db      	mvns	r3, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4013      	ands	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d003      	beq.n	8001306 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	4313      	orrs	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001306:	4a2f      	ldr	r2, [pc, #188]	; (80013c4 <HAL_GPIO_Init+0x304>)
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800130c:	4b2d      	ldr	r3, [pc, #180]	; (80013c4 <HAL_GPIO_Init+0x304>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	43db      	mvns	r3, r3
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4013      	ands	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d003      	beq.n	8001330 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	4313      	orrs	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001330:	4a24      	ldr	r2, [pc, #144]	; (80013c4 <HAL_GPIO_Init+0x304>)
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001336:	4b23      	ldr	r3, [pc, #140]	; (80013c4 <HAL_GPIO_Init+0x304>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	43db      	mvns	r3, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4013      	ands	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d003      	beq.n	800135a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	4313      	orrs	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800135a:	4a1a      	ldr	r2, [pc, #104]	; (80013c4 <HAL_GPIO_Init+0x304>)
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001360:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <HAL_GPIO_Init+0x304>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	43db      	mvns	r3, r3
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4013      	ands	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d003      	beq.n	8001384 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	4313      	orrs	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001384:	4a0f      	ldr	r2, [pc, #60]	; (80013c4 <HAL_GPIO_Init+0x304>)
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	3301      	adds	r3, #1
 800138e:	61fb      	str	r3, [r7, #28]
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	2b0f      	cmp	r3, #15
 8001394:	f67f aea2 	bls.w	80010dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001398:	bf00      	nop
 800139a:	bf00      	nop
 800139c:	3724      	adds	r7, #36	; 0x24
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40013800 	.word	0x40013800
 80013b0:	40020000 	.word	0x40020000
 80013b4:	40020400 	.word	0x40020400
 80013b8:	40020800 	.word	0x40020800
 80013bc:	40020c00 	.word	0x40020c00
 80013c0:	40021000 	.word	0x40021000
 80013c4:	40013c00 	.word	0x40013c00

080013c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	460b      	mov	r3, r1
 80013d2:	807b      	strh	r3, [r7, #2]
 80013d4:	4613      	mov	r3, r2
 80013d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013d8:	787b      	ldrb	r3, [r7, #1]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013de:	887a      	ldrh	r2, [r7, #2]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013e4:	e003      	b.n	80013ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013e6:	887b      	ldrh	r3, [r7, #2]
 80013e8:	041a      	lsls	r2, r3, #16
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	619a      	str	r2, [r3, #24]
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
	...

080013fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e12b      	b.n	8001666 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	d106      	bne.n	8001428 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff faf0 	bl	8000a08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2224      	movs	r2, #36	; 0x24
 800142c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f022 0201 	bic.w	r2, r2, #1
 800143e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800144e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800145e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001460:	f000 fd5c 	bl	8001f1c <HAL_RCC_GetPCLK1Freq>
 8001464:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	4a81      	ldr	r2, [pc, #516]	; (8001670 <HAL_I2C_Init+0x274>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d807      	bhi.n	8001480 <HAL_I2C_Init+0x84>
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4a80      	ldr	r2, [pc, #512]	; (8001674 <HAL_I2C_Init+0x278>)
 8001474:	4293      	cmp	r3, r2
 8001476:	bf94      	ite	ls
 8001478:	2301      	movls	r3, #1
 800147a:	2300      	movhi	r3, #0
 800147c:	b2db      	uxtb	r3, r3
 800147e:	e006      	b.n	800148e <HAL_I2C_Init+0x92>
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4a7d      	ldr	r2, [pc, #500]	; (8001678 <HAL_I2C_Init+0x27c>)
 8001484:	4293      	cmp	r3, r2
 8001486:	bf94      	ite	ls
 8001488:	2301      	movls	r3, #1
 800148a:	2300      	movhi	r3, #0
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e0e7      	b.n	8001666 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	4a78      	ldr	r2, [pc, #480]	; (800167c <HAL_I2C_Init+0x280>)
 800149a:	fba2 2303 	umull	r2, r3, r2, r3
 800149e:	0c9b      	lsrs	r3, r3, #18
 80014a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	430a      	orrs	r2, r1
 80014b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	4a6a      	ldr	r2, [pc, #424]	; (8001670 <HAL_I2C_Init+0x274>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d802      	bhi.n	80014d0 <HAL_I2C_Init+0xd4>
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	3301      	adds	r3, #1
 80014ce:	e009      	b.n	80014e4 <HAL_I2C_Init+0xe8>
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80014d6:	fb02 f303 	mul.w	r3, r2, r3
 80014da:	4a69      	ldr	r2, [pc, #420]	; (8001680 <HAL_I2C_Init+0x284>)
 80014dc:	fba2 2303 	umull	r2, r3, r2, r3
 80014e0:	099b      	lsrs	r3, r3, #6
 80014e2:	3301      	adds	r3, #1
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	6812      	ldr	r2, [r2, #0]
 80014e8:	430b      	orrs	r3, r1
 80014ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80014f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	495c      	ldr	r1, [pc, #368]	; (8001670 <HAL_I2C_Init+0x274>)
 8001500:	428b      	cmp	r3, r1
 8001502:	d819      	bhi.n	8001538 <HAL_I2C_Init+0x13c>
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	1e59      	subs	r1, r3, #1
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001512:	1c59      	adds	r1, r3, #1
 8001514:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001518:	400b      	ands	r3, r1
 800151a:	2b00      	cmp	r3, #0
 800151c:	d00a      	beq.n	8001534 <HAL_I2C_Init+0x138>
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	1e59      	subs	r1, r3, #1
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	fbb1 f3f3 	udiv	r3, r1, r3
 800152c:	3301      	adds	r3, #1
 800152e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001532:	e051      	b.n	80015d8 <HAL_I2C_Init+0x1dc>
 8001534:	2304      	movs	r3, #4
 8001536:	e04f      	b.n	80015d8 <HAL_I2C_Init+0x1dc>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d111      	bne.n	8001564 <HAL_I2C_Init+0x168>
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	1e58      	subs	r0, r3, #1
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6859      	ldr	r1, [r3, #4]
 8001548:	460b      	mov	r3, r1
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	440b      	add	r3, r1
 800154e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001552:	3301      	adds	r3, #1
 8001554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001558:	2b00      	cmp	r3, #0
 800155a:	bf0c      	ite	eq
 800155c:	2301      	moveq	r3, #1
 800155e:	2300      	movne	r3, #0
 8001560:	b2db      	uxtb	r3, r3
 8001562:	e012      	b.n	800158a <HAL_I2C_Init+0x18e>
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	1e58      	subs	r0, r3, #1
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6859      	ldr	r1, [r3, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	440b      	add	r3, r1
 8001572:	0099      	lsls	r1, r3, #2
 8001574:	440b      	add	r3, r1
 8001576:	fbb0 f3f3 	udiv	r3, r0, r3
 800157a:	3301      	adds	r3, #1
 800157c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001580:	2b00      	cmp	r3, #0
 8001582:	bf0c      	ite	eq
 8001584:	2301      	moveq	r3, #1
 8001586:	2300      	movne	r3, #0
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <HAL_I2C_Init+0x196>
 800158e:	2301      	movs	r3, #1
 8001590:	e022      	b.n	80015d8 <HAL_I2C_Init+0x1dc>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d10e      	bne.n	80015b8 <HAL_I2C_Init+0x1bc>
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	1e58      	subs	r0, r3, #1
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6859      	ldr	r1, [r3, #4]
 80015a2:	460b      	mov	r3, r1
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	440b      	add	r3, r1
 80015a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80015ac:	3301      	adds	r3, #1
 80015ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015b6:	e00f      	b.n	80015d8 <HAL_I2C_Init+0x1dc>
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	1e58      	subs	r0, r3, #1
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6859      	ldr	r1, [r3, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	440b      	add	r3, r1
 80015c6:	0099      	lsls	r1, r3, #2
 80015c8:	440b      	add	r3, r1
 80015ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80015ce:	3301      	adds	r3, #1
 80015d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015d8:	6879      	ldr	r1, [r7, #4]
 80015da:	6809      	ldr	r1, [r1, #0]
 80015dc:	4313      	orrs	r3, r2
 80015de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	69da      	ldr	r2, [r3, #28]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a1b      	ldr	r3, [r3, #32]
 80015f2:	431a      	orrs	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	430a      	orrs	r2, r1
 80015fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001606:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	6911      	ldr	r1, [r2, #16]
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	68d2      	ldr	r2, [r2, #12]
 8001612:	4311      	orrs	r1, r2
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	6812      	ldr	r2, [r2, #0]
 8001618:	430b      	orrs	r3, r1
 800161a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	695a      	ldr	r2, [r3, #20]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	431a      	orrs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	430a      	orrs	r2, r1
 8001636:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f042 0201 	orr.w	r2, r2, #1
 8001646:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2220      	movs	r2, #32
 8001652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	000186a0 	.word	0x000186a0
 8001674:	001e847f 	.word	0x001e847f
 8001678:	003d08ff 	.word	0x003d08ff
 800167c:	431bde83 	.word	0x431bde83
 8001680:	10624dd3 	.word	0x10624dd3

08001684 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e264      	b.n	8001b60 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d075      	beq.n	800178e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016a2:	4ba3      	ldr	r3, [pc, #652]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f003 030c 	and.w	r3, r3, #12
 80016aa:	2b04      	cmp	r3, #4
 80016ac:	d00c      	beq.n	80016c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ae:	4ba0      	ldr	r3, [pc, #640]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016b6:	2b08      	cmp	r3, #8
 80016b8:	d112      	bne.n	80016e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ba:	4b9d      	ldr	r3, [pc, #628]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016c6:	d10b      	bne.n	80016e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c8:	4b99      	ldr	r3, [pc, #612]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d05b      	beq.n	800178c <HAL_RCC_OscConfig+0x108>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d157      	bne.n	800178c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e23f      	b.n	8001b60 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016e8:	d106      	bne.n	80016f8 <HAL_RCC_OscConfig+0x74>
 80016ea:	4b91      	ldr	r3, [pc, #580]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a90      	ldr	r2, [pc, #576]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 80016f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f4:	6013      	str	r3, [r2, #0]
 80016f6:	e01d      	b.n	8001734 <HAL_RCC_OscConfig+0xb0>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001700:	d10c      	bne.n	800171c <HAL_RCC_OscConfig+0x98>
 8001702:	4b8b      	ldr	r3, [pc, #556]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a8a      	ldr	r2, [pc, #552]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 8001708:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	4b88      	ldr	r3, [pc, #544]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a87      	ldr	r2, [pc, #540]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 8001714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	e00b      	b.n	8001734 <HAL_RCC_OscConfig+0xb0>
 800171c:	4b84      	ldr	r3, [pc, #528]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a83      	ldr	r2, [pc, #524]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 8001722:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001726:	6013      	str	r3, [r2, #0]
 8001728:	4b81      	ldr	r3, [pc, #516]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a80      	ldr	r2, [pc, #512]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 800172e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001732:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d013      	beq.n	8001764 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173c:	f7ff fbce 	bl	8000edc <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001744:	f7ff fbca 	bl	8000edc <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b64      	cmp	r3, #100	; 0x64
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e204      	b.n	8001b60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001756:	4b76      	ldr	r3, [pc, #472]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d0f0      	beq.n	8001744 <HAL_RCC_OscConfig+0xc0>
 8001762:	e014      	b.n	800178e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001764:	f7ff fbba 	bl	8000edc <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800176c:	f7ff fbb6 	bl	8000edc <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b64      	cmp	r3, #100	; 0x64
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e1f0      	b.n	8001b60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800177e:	4b6c      	ldr	r3, [pc, #432]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1f0      	bne.n	800176c <HAL_RCC_OscConfig+0xe8>
 800178a:	e000      	b.n	800178e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800178c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d063      	beq.n	8001862 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800179a:	4b65      	ldr	r3, [pc, #404]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f003 030c 	and.w	r3, r3, #12
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d00b      	beq.n	80017be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017a6:	4b62      	ldr	r3, [pc, #392]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017ae:	2b08      	cmp	r3, #8
 80017b0:	d11c      	bne.n	80017ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017b2:	4b5f      	ldr	r3, [pc, #380]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d116      	bne.n	80017ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017be:	4b5c      	ldr	r3, [pc, #368]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d005      	beq.n	80017d6 <HAL_RCC_OscConfig+0x152>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d001      	beq.n	80017d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e1c4      	b.n	8001b60 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d6:	4b56      	ldr	r3, [pc, #344]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	4952      	ldr	r1, [pc, #328]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ea:	e03a      	b.n	8001862 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d020      	beq.n	8001836 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017f4:	4b4f      	ldr	r3, [pc, #316]	; (8001934 <HAL_RCC_OscConfig+0x2b0>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017fa:	f7ff fb6f 	bl	8000edc <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001802:	f7ff fb6b 	bl	8000edc <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e1a5      	b.n	8001b60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001814:	4b46      	ldr	r3, [pc, #280]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0f0      	beq.n	8001802 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001820:	4b43      	ldr	r3, [pc, #268]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	4940      	ldr	r1, [pc, #256]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 8001830:	4313      	orrs	r3, r2
 8001832:	600b      	str	r3, [r1, #0]
 8001834:	e015      	b.n	8001862 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001836:	4b3f      	ldr	r3, [pc, #252]	; (8001934 <HAL_RCC_OscConfig+0x2b0>)
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183c:	f7ff fb4e 	bl	8000edc <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001844:	f7ff fb4a 	bl	8000edc <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e184      	b.n	8001b60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001856:	4b36      	ldr	r3, [pc, #216]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1f0      	bne.n	8001844 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0308 	and.w	r3, r3, #8
 800186a:	2b00      	cmp	r3, #0
 800186c:	d030      	beq.n	80018d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d016      	beq.n	80018a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001876:	4b30      	ldr	r3, [pc, #192]	; (8001938 <HAL_RCC_OscConfig+0x2b4>)
 8001878:	2201      	movs	r2, #1
 800187a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800187c:	f7ff fb2e 	bl	8000edc <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001884:	f7ff fb2a 	bl	8000edc <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e164      	b.n	8001b60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001896:	4b26      	ldr	r3, [pc, #152]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 8001898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0f0      	beq.n	8001884 <HAL_RCC_OscConfig+0x200>
 80018a2:	e015      	b.n	80018d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018a4:	4b24      	ldr	r3, [pc, #144]	; (8001938 <HAL_RCC_OscConfig+0x2b4>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018aa:	f7ff fb17 	bl	8000edc <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018b0:	e008      	b.n	80018c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018b2:	f7ff fb13 	bl	8000edc <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e14d      	b.n	8001b60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018c4:	4b1a      	ldr	r3, [pc, #104]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 80018c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1f0      	bne.n	80018b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f000 80a0 	beq.w	8001a1e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018de:	2300      	movs	r3, #0
 80018e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018e2:	4b13      	ldr	r3, [pc, #76]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d10f      	bne.n	800190e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	4a0e      	ldr	r2, [pc, #56]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 80018f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018fc:	6413      	str	r3, [r2, #64]	; 0x40
 80018fe:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800190a:	2301      	movs	r3, #1
 800190c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800190e:	4b0b      	ldr	r3, [pc, #44]	; (800193c <HAL_RCC_OscConfig+0x2b8>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001916:	2b00      	cmp	r3, #0
 8001918:	d121      	bne.n	800195e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800191a:	4b08      	ldr	r3, [pc, #32]	; (800193c <HAL_RCC_OscConfig+0x2b8>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a07      	ldr	r2, [pc, #28]	; (800193c <HAL_RCC_OscConfig+0x2b8>)
 8001920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001924:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001926:	f7ff fad9 	bl	8000edc <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800192c:	e011      	b.n	8001952 <HAL_RCC_OscConfig+0x2ce>
 800192e:	bf00      	nop
 8001930:	40023800 	.word	0x40023800
 8001934:	42470000 	.word	0x42470000
 8001938:	42470e80 	.word	0x42470e80
 800193c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001940:	f7ff facc 	bl	8000edc <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e106      	b.n	8001b60 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001952:	4b85      	ldr	r3, [pc, #532]	; (8001b68 <HAL_RCC_OscConfig+0x4e4>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195a:	2b00      	cmp	r3, #0
 800195c:	d0f0      	beq.n	8001940 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d106      	bne.n	8001974 <HAL_RCC_OscConfig+0x2f0>
 8001966:	4b81      	ldr	r3, [pc, #516]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 8001968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800196a:	4a80      	ldr	r2, [pc, #512]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	6713      	str	r3, [r2, #112]	; 0x70
 8001972:	e01c      	b.n	80019ae <HAL_RCC_OscConfig+0x32a>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	2b05      	cmp	r3, #5
 800197a:	d10c      	bne.n	8001996 <HAL_RCC_OscConfig+0x312>
 800197c:	4b7b      	ldr	r3, [pc, #492]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 800197e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001980:	4a7a      	ldr	r2, [pc, #488]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 8001982:	f043 0304 	orr.w	r3, r3, #4
 8001986:	6713      	str	r3, [r2, #112]	; 0x70
 8001988:	4b78      	ldr	r3, [pc, #480]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 800198a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800198c:	4a77      	ldr	r2, [pc, #476]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	6713      	str	r3, [r2, #112]	; 0x70
 8001994:	e00b      	b.n	80019ae <HAL_RCC_OscConfig+0x32a>
 8001996:	4b75      	ldr	r3, [pc, #468]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 8001998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199a:	4a74      	ldr	r2, [pc, #464]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 800199c:	f023 0301 	bic.w	r3, r3, #1
 80019a0:	6713      	str	r3, [r2, #112]	; 0x70
 80019a2:	4b72      	ldr	r3, [pc, #456]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 80019a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a6:	4a71      	ldr	r2, [pc, #452]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 80019a8:	f023 0304 	bic.w	r3, r3, #4
 80019ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d015      	beq.n	80019e2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b6:	f7ff fa91 	bl	8000edc <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019bc:	e00a      	b.n	80019d4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019be:	f7ff fa8d 	bl	8000edc <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e0c5      	b.n	8001b60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d4:	4b65      	ldr	r3, [pc, #404]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 80019d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0ee      	beq.n	80019be <HAL_RCC_OscConfig+0x33a>
 80019e0:	e014      	b.n	8001a0c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e2:	f7ff fa7b 	bl	8000edc <HAL_GetTick>
 80019e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019e8:	e00a      	b.n	8001a00 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019ea:	f7ff fa77 	bl	8000edc <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e0af      	b.n	8001b60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a00:	4b5a      	ldr	r3, [pc, #360]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 8001a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1ee      	bne.n	80019ea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a0c:	7dfb      	ldrb	r3, [r7, #23]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d105      	bne.n	8001a1e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a12:	4b56      	ldr	r3, [pc, #344]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	4a55      	ldr	r2, [pc, #340]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 8001a18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a1c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f000 809b 	beq.w	8001b5e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a28:	4b50      	ldr	r3, [pc, #320]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f003 030c 	and.w	r3, r3, #12
 8001a30:	2b08      	cmp	r3, #8
 8001a32:	d05c      	beq.n	8001aee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d141      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a3c:	4b4c      	ldr	r3, [pc, #304]	; (8001b70 <HAL_RCC_OscConfig+0x4ec>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a42:	f7ff fa4b 	bl	8000edc <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a4a:	f7ff fa47 	bl	8000edc <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e081      	b.n	8001b60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a5c:	4b43      	ldr	r3, [pc, #268]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1f0      	bne.n	8001a4a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	69da      	ldr	r2, [r3, #28]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	431a      	orrs	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a76:	019b      	lsls	r3, r3, #6
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7e:	085b      	lsrs	r3, r3, #1
 8001a80:	3b01      	subs	r3, #1
 8001a82:	041b      	lsls	r3, r3, #16
 8001a84:	431a      	orrs	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8a:	061b      	lsls	r3, r3, #24
 8001a8c:	4937      	ldr	r1, [pc, #220]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a92:	4b37      	ldr	r3, [pc, #220]	; (8001b70 <HAL_RCC_OscConfig+0x4ec>)
 8001a94:	2201      	movs	r2, #1
 8001a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a98:	f7ff fa20 	bl	8000edc <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aa0:	f7ff fa1c 	bl	8000edc <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e056      	b.n	8001b60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ab2:	4b2e      	ldr	r3, [pc, #184]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0f0      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x41c>
 8001abe:	e04e      	b.n	8001b5e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac0:	4b2b      	ldr	r3, [pc, #172]	; (8001b70 <HAL_RCC_OscConfig+0x4ec>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac6:	f7ff fa09 	bl	8000edc <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ace:	f7ff fa05 	bl	8000edc <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e03f      	b.n	8001b60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ae0:	4b22      	ldr	r3, [pc, #136]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1f0      	bne.n	8001ace <HAL_RCC_OscConfig+0x44a>
 8001aec:	e037      	b.n	8001b5e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d101      	bne.n	8001afa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e032      	b.n	8001b60 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001afa:	4b1c      	ldr	r3, [pc, #112]	; (8001b6c <HAL_RCC_OscConfig+0x4e8>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d028      	beq.n	8001b5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d121      	bne.n	8001b5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d11a      	bne.n	8001b5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b30:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d111      	bne.n	8001b5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b40:	085b      	lsrs	r3, r3, #1
 8001b42:	3b01      	subs	r3, #1
 8001b44:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d107      	bne.n	8001b5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b54:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d001      	beq.n	8001b5e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e000      	b.n	8001b60 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40007000 	.word	0x40007000
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	42470060 	.word	0x42470060

08001b74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d101      	bne.n	8001b88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e0cc      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b88:	4b68      	ldr	r3, [pc, #416]	; (8001d2c <HAL_RCC_ClockConfig+0x1b8>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0307 	and.w	r3, r3, #7
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d90c      	bls.n	8001bb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b96:	4b65      	ldr	r3, [pc, #404]	; (8001d2c <HAL_RCC_ClockConfig+0x1b8>)
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9e:	4b63      	ldr	r3, [pc, #396]	; (8001d2c <HAL_RCC_ClockConfig+0x1b8>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d001      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e0b8      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d020      	beq.n	8001bfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d005      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bc8:	4b59      	ldr	r3, [pc, #356]	; (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	4a58      	ldr	r2, [pc, #352]	; (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001bce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0308 	and.w	r3, r3, #8
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d005      	beq.n	8001bec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001be0:	4b53      	ldr	r3, [pc, #332]	; (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	4a52      	ldr	r2, [pc, #328]	; (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001be6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bec:	4b50      	ldr	r3, [pc, #320]	; (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	494d      	ldr	r1, [pc, #308]	; (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d044      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d107      	bne.n	8001c22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c12:	4b47      	ldr	r3, [pc, #284]	; (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d119      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e07f      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d003      	beq.n	8001c32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c2e:	2b03      	cmp	r3, #3
 8001c30:	d107      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c32:	4b3f      	ldr	r3, [pc, #252]	; (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d109      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e06f      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c42:	4b3b      	ldr	r3, [pc, #236]	; (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e067      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c52:	4b37      	ldr	r3, [pc, #220]	; (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f023 0203 	bic.w	r2, r3, #3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	4934      	ldr	r1, [pc, #208]	; (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c64:	f7ff f93a 	bl	8000edc <HAL_GetTick>
 8001c68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6a:	e00a      	b.n	8001c82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c6c:	f7ff f936 	bl	8000edc <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e04f      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c82:	4b2b      	ldr	r3, [pc, #172]	; (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 020c 	and.w	r2, r3, #12
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d1eb      	bne.n	8001c6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c94:	4b25      	ldr	r3, [pc, #148]	; (8001d2c <HAL_RCC_ClockConfig+0x1b8>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d20c      	bcs.n	8001cbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca2:	4b22      	ldr	r3, [pc, #136]	; (8001d2c <HAL_RCC_ClockConfig+0x1b8>)
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	b2d2      	uxtb	r2, r2
 8001ca8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001caa:	4b20      	ldr	r3, [pc, #128]	; (8001d2c <HAL_RCC_ClockConfig+0x1b8>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d001      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e032      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d008      	beq.n	8001cda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cc8:	4b19      	ldr	r3, [pc, #100]	; (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	4916      	ldr	r1, [pc, #88]	; (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0308 	and.w	r3, r3, #8
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d009      	beq.n	8001cfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ce6:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	490e      	ldr	r1, [pc, #56]	; (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cfa:	f000 f821 	bl	8001d40 <HAL_RCC_GetSysClockFreq>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	4b0b      	ldr	r3, [pc, #44]	; (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	091b      	lsrs	r3, r3, #4
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	490a      	ldr	r1, [pc, #40]	; (8001d34 <HAL_RCC_ClockConfig+0x1c0>)
 8001d0c:	5ccb      	ldrb	r3, [r1, r3]
 8001d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d12:	4a09      	ldr	r2, [pc, #36]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001d14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d16:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <HAL_RCC_ClockConfig+0x1c8>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff f89a 	bl	8000e54 <HAL_InitTick>

  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40023c00 	.word	0x40023c00
 8001d30:	40023800 	.word	0x40023800
 8001d34:	08003b2c 	.word	0x08003b2c
 8001d38:	20000000 	.word	0x20000000
 8001d3c:	20000004 	.word	0x20000004

08001d40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d44:	b084      	sub	sp, #16
 8001d46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	607b      	str	r3, [r7, #4]
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	2300      	movs	r3, #0
 8001d52:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d58:	4b67      	ldr	r3, [pc, #412]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 030c 	and.w	r3, r3, #12
 8001d60:	2b08      	cmp	r3, #8
 8001d62:	d00d      	beq.n	8001d80 <HAL_RCC_GetSysClockFreq+0x40>
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	f200 80bd 	bhi.w	8001ee4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d002      	beq.n	8001d74 <HAL_RCC_GetSysClockFreq+0x34>
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	d003      	beq.n	8001d7a <HAL_RCC_GetSysClockFreq+0x3a>
 8001d72:	e0b7      	b.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d74:	4b61      	ldr	r3, [pc, #388]	; (8001efc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001d76:	60bb      	str	r3, [r7, #8]
       break;
 8001d78:	e0b7      	b.n	8001eea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d7a:	4b61      	ldr	r3, [pc, #388]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001d7c:	60bb      	str	r3, [r7, #8]
      break;
 8001d7e:	e0b4      	b.n	8001eea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d80:	4b5d      	ldr	r3, [pc, #372]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d88:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d8a:	4b5b      	ldr	r3, [pc, #364]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d04d      	beq.n	8001e32 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d96:	4b58      	ldr	r3, [pc, #352]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	099b      	lsrs	r3, r3, #6
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	f04f 0300 	mov.w	r3, #0
 8001da2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001da6:	f04f 0100 	mov.w	r1, #0
 8001daa:	ea02 0800 	and.w	r8, r2, r0
 8001dae:	ea03 0901 	and.w	r9, r3, r1
 8001db2:	4640      	mov	r0, r8
 8001db4:	4649      	mov	r1, r9
 8001db6:	f04f 0200 	mov.w	r2, #0
 8001dba:	f04f 0300 	mov.w	r3, #0
 8001dbe:	014b      	lsls	r3, r1, #5
 8001dc0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001dc4:	0142      	lsls	r2, r0, #5
 8001dc6:	4610      	mov	r0, r2
 8001dc8:	4619      	mov	r1, r3
 8001dca:	ebb0 0008 	subs.w	r0, r0, r8
 8001dce:	eb61 0109 	sbc.w	r1, r1, r9
 8001dd2:	f04f 0200 	mov.w	r2, #0
 8001dd6:	f04f 0300 	mov.w	r3, #0
 8001dda:	018b      	lsls	r3, r1, #6
 8001ddc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001de0:	0182      	lsls	r2, r0, #6
 8001de2:	1a12      	subs	r2, r2, r0
 8001de4:	eb63 0301 	sbc.w	r3, r3, r1
 8001de8:	f04f 0000 	mov.w	r0, #0
 8001dec:	f04f 0100 	mov.w	r1, #0
 8001df0:	00d9      	lsls	r1, r3, #3
 8001df2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001df6:	00d0      	lsls	r0, r2, #3
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	eb12 0208 	adds.w	r2, r2, r8
 8001e00:	eb43 0309 	adc.w	r3, r3, r9
 8001e04:	f04f 0000 	mov.w	r0, #0
 8001e08:	f04f 0100 	mov.w	r1, #0
 8001e0c:	0259      	lsls	r1, r3, #9
 8001e0e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001e12:	0250      	lsls	r0, r2, #9
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	4610      	mov	r0, r2
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	f04f 0300 	mov.w	r3, #0
 8001e24:	f7fe f9d6 	bl	80001d4 <__aeabi_uldivmod>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	e04a      	b.n	8001ec8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e32:	4b31      	ldr	r3, [pc, #196]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	099b      	lsrs	r3, r3, #6
 8001e38:	461a      	mov	r2, r3
 8001e3a:	f04f 0300 	mov.w	r3, #0
 8001e3e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e42:	f04f 0100 	mov.w	r1, #0
 8001e46:	ea02 0400 	and.w	r4, r2, r0
 8001e4a:	ea03 0501 	and.w	r5, r3, r1
 8001e4e:	4620      	mov	r0, r4
 8001e50:	4629      	mov	r1, r5
 8001e52:	f04f 0200 	mov.w	r2, #0
 8001e56:	f04f 0300 	mov.w	r3, #0
 8001e5a:	014b      	lsls	r3, r1, #5
 8001e5c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e60:	0142      	lsls	r2, r0, #5
 8001e62:	4610      	mov	r0, r2
 8001e64:	4619      	mov	r1, r3
 8001e66:	1b00      	subs	r0, r0, r4
 8001e68:	eb61 0105 	sbc.w	r1, r1, r5
 8001e6c:	f04f 0200 	mov.w	r2, #0
 8001e70:	f04f 0300 	mov.w	r3, #0
 8001e74:	018b      	lsls	r3, r1, #6
 8001e76:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e7a:	0182      	lsls	r2, r0, #6
 8001e7c:	1a12      	subs	r2, r2, r0
 8001e7e:	eb63 0301 	sbc.w	r3, r3, r1
 8001e82:	f04f 0000 	mov.w	r0, #0
 8001e86:	f04f 0100 	mov.w	r1, #0
 8001e8a:	00d9      	lsls	r1, r3, #3
 8001e8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e90:	00d0      	lsls	r0, r2, #3
 8001e92:	4602      	mov	r2, r0
 8001e94:	460b      	mov	r3, r1
 8001e96:	1912      	adds	r2, r2, r4
 8001e98:	eb45 0303 	adc.w	r3, r5, r3
 8001e9c:	f04f 0000 	mov.w	r0, #0
 8001ea0:	f04f 0100 	mov.w	r1, #0
 8001ea4:	0299      	lsls	r1, r3, #10
 8001ea6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001eaa:	0290      	lsls	r0, r2, #10
 8001eac:	4602      	mov	r2, r0
 8001eae:	460b      	mov	r3, r1
 8001eb0:	4610      	mov	r0, r2
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	f04f 0300 	mov.w	r3, #0
 8001ebc:	f7fe f98a 	bl	80001d4 <__aeabi_uldivmod>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	0c1b      	lsrs	r3, r3, #16
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee0:	60bb      	str	r3, [r7, #8]
      break;
 8001ee2:	e002      	b.n	8001eea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ee4:	4b05      	ldr	r3, [pc, #20]	; (8001efc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001ee6:	60bb      	str	r3, [r7, #8]
      break;
 8001ee8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eea:	68bb      	ldr	r3, [r7, #8]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	00f42400 	.word	0x00f42400
 8001f00:	007a1200 	.word	0x007a1200

08001f04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f08:	4b03      	ldr	r3, [pc, #12]	; (8001f18 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	20000000 	.word	0x20000000

08001f1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f20:	f7ff fff0 	bl	8001f04 <HAL_RCC_GetHCLKFreq>
 8001f24:	4602      	mov	r2, r0
 8001f26:	4b05      	ldr	r3, [pc, #20]	; (8001f3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	0a9b      	lsrs	r3, r3, #10
 8001f2c:	f003 0307 	and.w	r3, r3, #7
 8001f30:	4903      	ldr	r1, [pc, #12]	; (8001f40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f32:	5ccb      	ldrb	r3, [r1, r3]
 8001f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	08003b3c 	.word	0x08003b3c

08001f44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f48:	f7ff ffdc 	bl	8001f04 <HAL_RCC_GetHCLKFreq>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	0b5b      	lsrs	r3, r3, #13
 8001f54:	f003 0307 	and.w	r3, r3, #7
 8001f58:	4903      	ldr	r1, [pc, #12]	; (8001f68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f5a:	5ccb      	ldrb	r3, [r1, r3]
 8001f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40023800 	.word	0x40023800
 8001f68:	08003b3c 	.word	0x08003b3c

08001f6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e041      	b.n	8002002 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d106      	bne.n	8001f98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7fe fd80 	bl	8000a98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3304      	adds	r3, #4
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4610      	mov	r0, r2
 8001fac:	f000 fb1a 	bl	80025e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b01      	cmp	r3, #1
 800201e:	d001      	beq.n	8002024 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e044      	b.n	80020ae <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2202      	movs	r2, #2
 8002028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68da      	ldr	r2, [r3, #12]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f042 0201 	orr.w	r2, r2, #1
 800203a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a1e      	ldr	r2, [pc, #120]	; (80020bc <HAL_TIM_Base_Start_IT+0xb0>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d018      	beq.n	8002078 <HAL_TIM_Base_Start_IT+0x6c>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800204e:	d013      	beq.n	8002078 <HAL_TIM_Base_Start_IT+0x6c>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a1a      	ldr	r2, [pc, #104]	; (80020c0 <HAL_TIM_Base_Start_IT+0xb4>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d00e      	beq.n	8002078 <HAL_TIM_Base_Start_IT+0x6c>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a19      	ldr	r2, [pc, #100]	; (80020c4 <HAL_TIM_Base_Start_IT+0xb8>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d009      	beq.n	8002078 <HAL_TIM_Base_Start_IT+0x6c>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a17      	ldr	r2, [pc, #92]	; (80020c8 <HAL_TIM_Base_Start_IT+0xbc>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d004      	beq.n	8002078 <HAL_TIM_Base_Start_IT+0x6c>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a16      	ldr	r2, [pc, #88]	; (80020cc <HAL_TIM_Base_Start_IT+0xc0>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d111      	bne.n	800209c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2b06      	cmp	r3, #6
 8002088:	d010      	beq.n	80020ac <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f042 0201 	orr.w	r2, r2, #1
 8002098:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800209a:	e007      	b.n	80020ac <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f042 0201 	orr.w	r2, r2, #1
 80020aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	40010000 	.word	0x40010000
 80020c0:	40000400 	.word	0x40000400
 80020c4:	40000800 	.word	0x40000800
 80020c8:	40000c00 	.word	0x40000c00
 80020cc:	40014000 	.word	0x40014000

080020d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e041      	b.n	8002166 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d106      	bne.n	80020fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f7fe fcf0 	bl	8000adc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2202      	movs	r2, #2
 8002100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3304      	adds	r3, #4
 800210c:	4619      	mov	r1, r3
 800210e:	4610      	mov	r0, r2
 8002110:	f000 fa68 	bl	80025e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
	...

08002170 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d109      	bne.n	8002194 <HAL_TIM_PWM_Start+0x24>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2b01      	cmp	r3, #1
 800218a:	bf14      	ite	ne
 800218c:	2301      	movne	r3, #1
 800218e:	2300      	moveq	r3, #0
 8002190:	b2db      	uxtb	r3, r3
 8002192:	e022      	b.n	80021da <HAL_TIM_PWM_Start+0x6a>
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	2b04      	cmp	r3, #4
 8002198:	d109      	bne.n	80021ae <HAL_TIM_PWM_Start+0x3e>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	bf14      	ite	ne
 80021a6:	2301      	movne	r3, #1
 80021a8:	2300      	moveq	r3, #0
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	e015      	b.n	80021da <HAL_TIM_PWM_Start+0x6a>
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	2b08      	cmp	r3, #8
 80021b2:	d109      	bne.n	80021c8 <HAL_TIM_PWM_Start+0x58>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b01      	cmp	r3, #1
 80021be:	bf14      	ite	ne
 80021c0:	2301      	movne	r3, #1
 80021c2:	2300      	moveq	r3, #0
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	e008      	b.n	80021da <HAL_TIM_PWM_Start+0x6a>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	bf14      	ite	ne
 80021d4:	2301      	movne	r3, #1
 80021d6:	2300      	moveq	r3, #0
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e068      	b.n	80022b4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d104      	bne.n	80021f2 <HAL_TIM_PWM_Start+0x82>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2202      	movs	r2, #2
 80021ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021f0:	e013      	b.n	800221a <HAL_TIM_PWM_Start+0xaa>
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	2b04      	cmp	r3, #4
 80021f6:	d104      	bne.n	8002202 <HAL_TIM_PWM_Start+0x92>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2202      	movs	r2, #2
 80021fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002200:	e00b      	b.n	800221a <HAL_TIM_PWM_Start+0xaa>
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	2b08      	cmp	r3, #8
 8002206:	d104      	bne.n	8002212 <HAL_TIM_PWM_Start+0xa2>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2202      	movs	r2, #2
 800220c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002210:	e003      	b.n	800221a <HAL_TIM_PWM_Start+0xaa>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2202      	movs	r2, #2
 8002216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2201      	movs	r2, #1
 8002220:	6839      	ldr	r1, [r7, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f000 fc84 	bl	8002b30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a23      	ldr	r2, [pc, #140]	; (80022bc <HAL_TIM_PWM_Start+0x14c>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d107      	bne.n	8002242 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002240:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a1d      	ldr	r2, [pc, #116]	; (80022bc <HAL_TIM_PWM_Start+0x14c>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d018      	beq.n	800227e <HAL_TIM_PWM_Start+0x10e>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002254:	d013      	beq.n	800227e <HAL_TIM_PWM_Start+0x10e>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a19      	ldr	r2, [pc, #100]	; (80022c0 <HAL_TIM_PWM_Start+0x150>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d00e      	beq.n	800227e <HAL_TIM_PWM_Start+0x10e>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a17      	ldr	r2, [pc, #92]	; (80022c4 <HAL_TIM_PWM_Start+0x154>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d009      	beq.n	800227e <HAL_TIM_PWM_Start+0x10e>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a16      	ldr	r2, [pc, #88]	; (80022c8 <HAL_TIM_PWM_Start+0x158>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d004      	beq.n	800227e <HAL_TIM_PWM_Start+0x10e>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a14      	ldr	r2, [pc, #80]	; (80022cc <HAL_TIM_PWM_Start+0x15c>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d111      	bne.n	80022a2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2b06      	cmp	r3, #6
 800228e:	d010      	beq.n	80022b2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f042 0201 	orr.w	r2, r2, #1
 800229e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022a0:	e007      	b.n	80022b2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f042 0201 	orr.w	r2, r2, #1
 80022b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3710      	adds	r7, #16
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40010000 	.word	0x40010000
 80022c0:	40000400 	.word	0x40000400
 80022c4:	40000800 	.word	0x40000800
 80022c8:	40000c00 	.word	0x40000c00
 80022cc:	40014000 	.word	0x40014000

080022d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022dc:	2300      	movs	r3, #0
 80022de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d101      	bne.n	80022ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80022ea:	2302      	movs	r3, #2
 80022ec:	e0ae      	b.n	800244c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b0c      	cmp	r3, #12
 80022fa:	f200 809f 	bhi.w	800243c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80022fe:	a201      	add	r2, pc, #4	; (adr r2, 8002304 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002304:	08002339 	.word	0x08002339
 8002308:	0800243d 	.word	0x0800243d
 800230c:	0800243d 	.word	0x0800243d
 8002310:	0800243d 	.word	0x0800243d
 8002314:	08002379 	.word	0x08002379
 8002318:	0800243d 	.word	0x0800243d
 800231c:	0800243d 	.word	0x0800243d
 8002320:	0800243d 	.word	0x0800243d
 8002324:	080023bb 	.word	0x080023bb
 8002328:	0800243d 	.word	0x0800243d
 800232c:	0800243d 	.word	0x0800243d
 8002330:	0800243d 	.word	0x0800243d
 8002334:	080023fb 	.word	0x080023fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68b9      	ldr	r1, [r7, #8]
 800233e:	4618      	mov	r0, r3
 8002340:	f000 f9d0 	bl	80026e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	699a      	ldr	r2, [r3, #24]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f042 0208 	orr.w	r2, r2, #8
 8002352:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	699a      	ldr	r2, [r3, #24]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f022 0204 	bic.w	r2, r2, #4
 8002362:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6999      	ldr	r1, [r3, #24]
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	691a      	ldr	r2, [r3, #16]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	430a      	orrs	r2, r1
 8002374:	619a      	str	r2, [r3, #24]
      break;
 8002376:	e064      	b.n	8002442 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68b9      	ldr	r1, [r7, #8]
 800237e:	4618      	mov	r0, r3
 8002380:	f000 fa16 	bl	80027b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	699a      	ldr	r2, [r3, #24]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002392:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	699a      	ldr	r2, [r3, #24]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6999      	ldr	r1, [r3, #24]
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	021a      	lsls	r2, r3, #8
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	430a      	orrs	r2, r1
 80023b6:	619a      	str	r2, [r3, #24]
      break;
 80023b8:	e043      	b.n	8002442 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68b9      	ldr	r1, [r7, #8]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f000 fa61 	bl	8002888 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	69da      	ldr	r2, [r3, #28]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f042 0208 	orr.w	r2, r2, #8
 80023d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	69da      	ldr	r2, [r3, #28]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 0204 	bic.w	r2, r2, #4
 80023e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	69d9      	ldr	r1, [r3, #28]
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	691a      	ldr	r2, [r3, #16]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	61da      	str	r2, [r3, #28]
      break;
 80023f8:	e023      	b.n	8002442 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68b9      	ldr	r1, [r7, #8]
 8002400:	4618      	mov	r0, r3
 8002402:	f000 faab 	bl	800295c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	69da      	ldr	r2, [r3, #28]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002414:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	69da      	ldr	r2, [r3, #28]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002424:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	69d9      	ldr	r1, [r3, #28]
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	021a      	lsls	r2, r3, #8
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	430a      	orrs	r2, r1
 8002438:	61da      	str	r2, [r3, #28]
      break;
 800243a:	e002      	b.n	8002442 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	75fb      	strb	r3, [r7, #23]
      break;
 8002440:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800244a:	7dfb      	ldrb	r3, [r7, #23]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800245e:	2300      	movs	r3, #0
 8002460:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002468:	2b01      	cmp	r3, #1
 800246a:	d101      	bne.n	8002470 <HAL_TIM_ConfigClockSource+0x1c>
 800246c:	2302      	movs	r3, #2
 800246e:	e0b4      	b.n	80025da <HAL_TIM_ConfigClockSource+0x186>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2202      	movs	r2, #2
 800247c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800248e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002496:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68ba      	ldr	r2, [r7, #8]
 800249e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024a8:	d03e      	beq.n	8002528 <HAL_TIM_ConfigClockSource+0xd4>
 80024aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024ae:	f200 8087 	bhi.w	80025c0 <HAL_TIM_ConfigClockSource+0x16c>
 80024b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024b6:	f000 8086 	beq.w	80025c6 <HAL_TIM_ConfigClockSource+0x172>
 80024ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024be:	d87f      	bhi.n	80025c0 <HAL_TIM_ConfigClockSource+0x16c>
 80024c0:	2b70      	cmp	r3, #112	; 0x70
 80024c2:	d01a      	beq.n	80024fa <HAL_TIM_ConfigClockSource+0xa6>
 80024c4:	2b70      	cmp	r3, #112	; 0x70
 80024c6:	d87b      	bhi.n	80025c0 <HAL_TIM_ConfigClockSource+0x16c>
 80024c8:	2b60      	cmp	r3, #96	; 0x60
 80024ca:	d050      	beq.n	800256e <HAL_TIM_ConfigClockSource+0x11a>
 80024cc:	2b60      	cmp	r3, #96	; 0x60
 80024ce:	d877      	bhi.n	80025c0 <HAL_TIM_ConfigClockSource+0x16c>
 80024d0:	2b50      	cmp	r3, #80	; 0x50
 80024d2:	d03c      	beq.n	800254e <HAL_TIM_ConfigClockSource+0xfa>
 80024d4:	2b50      	cmp	r3, #80	; 0x50
 80024d6:	d873      	bhi.n	80025c0 <HAL_TIM_ConfigClockSource+0x16c>
 80024d8:	2b40      	cmp	r3, #64	; 0x40
 80024da:	d058      	beq.n	800258e <HAL_TIM_ConfigClockSource+0x13a>
 80024dc:	2b40      	cmp	r3, #64	; 0x40
 80024de:	d86f      	bhi.n	80025c0 <HAL_TIM_ConfigClockSource+0x16c>
 80024e0:	2b30      	cmp	r3, #48	; 0x30
 80024e2:	d064      	beq.n	80025ae <HAL_TIM_ConfigClockSource+0x15a>
 80024e4:	2b30      	cmp	r3, #48	; 0x30
 80024e6:	d86b      	bhi.n	80025c0 <HAL_TIM_ConfigClockSource+0x16c>
 80024e8:	2b20      	cmp	r3, #32
 80024ea:	d060      	beq.n	80025ae <HAL_TIM_ConfigClockSource+0x15a>
 80024ec:	2b20      	cmp	r3, #32
 80024ee:	d867      	bhi.n	80025c0 <HAL_TIM_ConfigClockSource+0x16c>
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d05c      	beq.n	80025ae <HAL_TIM_ConfigClockSource+0x15a>
 80024f4:	2b10      	cmp	r3, #16
 80024f6:	d05a      	beq.n	80025ae <HAL_TIM_ConfigClockSource+0x15a>
 80024f8:	e062      	b.n	80025c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6818      	ldr	r0, [r3, #0]
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	6899      	ldr	r1, [r3, #8]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	f000 faf1 	bl	8002af0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800251c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	609a      	str	r2, [r3, #8]
      break;
 8002526:	e04f      	b.n	80025c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6818      	ldr	r0, [r3, #0]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	6899      	ldr	r1, [r3, #8]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	f000 fada 	bl	8002af0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689a      	ldr	r2, [r3, #8]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800254a:	609a      	str	r2, [r3, #8]
      break;
 800254c:	e03c      	b.n	80025c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6818      	ldr	r0, [r3, #0]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	6859      	ldr	r1, [r3, #4]
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	461a      	mov	r2, r3
 800255c:	f000 fa4e 	bl	80029fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2150      	movs	r1, #80	; 0x50
 8002566:	4618      	mov	r0, r3
 8002568:	f000 faa7 	bl	8002aba <TIM_ITRx_SetConfig>
      break;
 800256c:	e02c      	b.n	80025c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6818      	ldr	r0, [r3, #0]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	6859      	ldr	r1, [r3, #4]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	461a      	mov	r2, r3
 800257c:	f000 fa6d 	bl	8002a5a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2160      	movs	r1, #96	; 0x60
 8002586:	4618      	mov	r0, r3
 8002588:	f000 fa97 	bl	8002aba <TIM_ITRx_SetConfig>
      break;
 800258c:	e01c      	b.n	80025c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6818      	ldr	r0, [r3, #0]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	6859      	ldr	r1, [r3, #4]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	461a      	mov	r2, r3
 800259c:	f000 fa2e 	bl	80029fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2140      	movs	r1, #64	; 0x40
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 fa87 	bl	8002aba <TIM_ITRx_SetConfig>
      break;
 80025ac:	e00c      	b.n	80025c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4619      	mov	r1, r3
 80025b8:	4610      	mov	r0, r2
 80025ba:	f000 fa7e 	bl	8002aba <TIM_ITRx_SetConfig>
      break;
 80025be:	e003      	b.n	80025c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	73fb      	strb	r3, [r7, #15]
      break;
 80025c4:	e000      	b.n	80025c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80025c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80025d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
	...

080025e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a34      	ldr	r2, [pc, #208]	; (80026c8 <TIM_Base_SetConfig+0xe4>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d00f      	beq.n	800261c <TIM_Base_SetConfig+0x38>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002602:	d00b      	beq.n	800261c <TIM_Base_SetConfig+0x38>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a31      	ldr	r2, [pc, #196]	; (80026cc <TIM_Base_SetConfig+0xe8>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d007      	beq.n	800261c <TIM_Base_SetConfig+0x38>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a30      	ldr	r2, [pc, #192]	; (80026d0 <TIM_Base_SetConfig+0xec>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d003      	beq.n	800261c <TIM_Base_SetConfig+0x38>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a2f      	ldr	r2, [pc, #188]	; (80026d4 <TIM_Base_SetConfig+0xf0>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d108      	bne.n	800262e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002622:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	4313      	orrs	r3, r2
 800262c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a25      	ldr	r2, [pc, #148]	; (80026c8 <TIM_Base_SetConfig+0xe4>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d01b      	beq.n	800266e <TIM_Base_SetConfig+0x8a>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800263c:	d017      	beq.n	800266e <TIM_Base_SetConfig+0x8a>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a22      	ldr	r2, [pc, #136]	; (80026cc <TIM_Base_SetConfig+0xe8>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d013      	beq.n	800266e <TIM_Base_SetConfig+0x8a>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a21      	ldr	r2, [pc, #132]	; (80026d0 <TIM_Base_SetConfig+0xec>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d00f      	beq.n	800266e <TIM_Base_SetConfig+0x8a>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a20      	ldr	r2, [pc, #128]	; (80026d4 <TIM_Base_SetConfig+0xf0>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d00b      	beq.n	800266e <TIM_Base_SetConfig+0x8a>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a1f      	ldr	r2, [pc, #124]	; (80026d8 <TIM_Base_SetConfig+0xf4>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d007      	beq.n	800266e <TIM_Base_SetConfig+0x8a>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a1e      	ldr	r2, [pc, #120]	; (80026dc <TIM_Base_SetConfig+0xf8>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d003      	beq.n	800266e <TIM_Base_SetConfig+0x8a>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a1d      	ldr	r2, [pc, #116]	; (80026e0 <TIM_Base_SetConfig+0xfc>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d108      	bne.n	8002680 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002674:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	4313      	orrs	r3, r2
 800267e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	4313      	orrs	r3, r2
 800268c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a08      	ldr	r2, [pc, #32]	; (80026c8 <TIM_Base_SetConfig+0xe4>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d103      	bne.n	80026b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	691a      	ldr	r2, [r3, #16]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	615a      	str	r2, [r3, #20]
}
 80026ba:	bf00      	nop
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	40010000 	.word	0x40010000
 80026cc:	40000400 	.word	0x40000400
 80026d0:	40000800 	.word	0x40000800
 80026d4:	40000c00 	.word	0x40000c00
 80026d8:	40014000 	.word	0x40014000
 80026dc:	40014400 	.word	0x40014400
 80026e0:	40014800 	.word	0x40014800

080026e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b087      	sub	sp, #28
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	f023 0201 	bic.w	r2, r3, #1
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f023 0303 	bic.w	r3, r3, #3
 800271a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	4313      	orrs	r3, r2
 8002724:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	f023 0302 	bic.w	r3, r3, #2
 800272c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	4313      	orrs	r3, r2
 8002736:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a1c      	ldr	r2, [pc, #112]	; (80027ac <TIM_OC1_SetConfig+0xc8>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d10c      	bne.n	800275a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	f023 0308 	bic.w	r3, r3, #8
 8002746:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	4313      	orrs	r3, r2
 8002750:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	f023 0304 	bic.w	r3, r3, #4
 8002758:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a13      	ldr	r2, [pc, #76]	; (80027ac <TIM_OC1_SetConfig+0xc8>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d111      	bne.n	8002786 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002768:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002770:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	4313      	orrs	r3, r2
 800277a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	4313      	orrs	r3, r2
 8002784:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	621a      	str	r2, [r3, #32]
}
 80027a0:	bf00      	nop
 80027a2:	371c      	adds	r7, #28
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	40010000 	.word	0x40010000

080027b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b087      	sub	sp, #28
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	f023 0210 	bic.w	r2, r3, #16
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	021b      	lsls	r3, r3, #8
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	f023 0320 	bic.w	r3, r3, #32
 80027fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	011b      	lsls	r3, r3, #4
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	4313      	orrs	r3, r2
 8002806:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a1e      	ldr	r2, [pc, #120]	; (8002884 <TIM_OC2_SetConfig+0xd4>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d10d      	bne.n	800282c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002816:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	011b      	lsls	r3, r3, #4
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	4313      	orrs	r3, r2
 8002822:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800282a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a15      	ldr	r2, [pc, #84]	; (8002884 <TIM_OC2_SetConfig+0xd4>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d113      	bne.n	800285c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800283a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002842:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	4313      	orrs	r3, r2
 800284e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	4313      	orrs	r3, r2
 800285a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	621a      	str	r2, [r3, #32]
}
 8002876:	bf00      	nop
 8002878:	371c      	adds	r7, #28
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	40010000 	.word	0x40010000

08002888 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002888:	b480      	push	{r7}
 800288a:	b087      	sub	sp, #28
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f023 0303 	bic.w	r3, r3, #3
 80028be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	021b      	lsls	r3, r3, #8
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	4313      	orrs	r3, r2
 80028dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a1d      	ldr	r2, [pc, #116]	; (8002958 <TIM_OC3_SetConfig+0xd0>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d10d      	bne.n	8002902 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	021b      	lsls	r3, r3, #8
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002900:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a14      	ldr	r2, [pc, #80]	; (8002958 <TIM_OC3_SetConfig+0xd0>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d113      	bne.n	8002932 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002910:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002918:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	011b      	lsls	r3, r3, #4
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	4313      	orrs	r3, r2
 8002924:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	011b      	lsls	r3, r3, #4
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	4313      	orrs	r3, r2
 8002930:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685a      	ldr	r2, [r3, #4]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	621a      	str	r2, [r3, #32]
}
 800294c:	bf00      	nop
 800294e:	371c      	adds	r7, #28
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	40010000 	.word	0x40010000

0800295c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800295c:	b480      	push	{r7}
 800295e:	b087      	sub	sp, #28
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800298a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002992:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	021b      	lsls	r3, r3, #8
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	4313      	orrs	r3, r2
 800299e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	031b      	lsls	r3, r3, #12
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a10      	ldr	r2, [pc, #64]	; (80029f8 <TIM_OC4_SetConfig+0x9c>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d109      	bne.n	80029d0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	019b      	lsls	r3, r3, #6
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	621a      	str	r2, [r3, #32]
}
 80029ea:	bf00      	nop
 80029ec:	371c      	adds	r7, #28
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	40010000 	.word	0x40010000

080029fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b087      	sub	sp, #28
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	f023 0201 	bic.w	r2, r3, #1
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	011b      	lsls	r3, r3, #4
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f023 030a 	bic.w	r3, r3, #10
 8002a38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	621a      	str	r2, [r3, #32]
}
 8002a4e:	bf00      	nop
 8002a50:	371c      	adds	r7, #28
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b087      	sub	sp, #28
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	60f8      	str	r0, [r7, #12]
 8002a62:	60b9      	str	r1, [r7, #8]
 8002a64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	f023 0210 	bic.w	r2, r3, #16
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	031b      	lsls	r3, r3, #12
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	011b      	lsls	r3, r3, #4
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	621a      	str	r2, [r3, #32]
}
 8002aae:	bf00      	nop
 8002ab0:	371c      	adds	r7, #28
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b085      	sub	sp, #20
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
 8002ac2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ad0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	f043 0307 	orr.w	r3, r3, #7
 8002adc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	609a      	str	r2, [r3, #8]
}
 8002ae4:	bf00      	nop
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b087      	sub	sp, #28
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
 8002afc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	021a      	lsls	r2, r3, #8
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	431a      	orrs	r2, r3
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	609a      	str	r2, [r3, #8]
}
 8002b24:	bf00      	nop
 8002b26:	371c      	adds	r7, #28
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b087      	sub	sp, #28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	f003 031f 	and.w	r3, r3, #31
 8002b42:	2201      	movs	r2, #1
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6a1a      	ldr	r2, [r3, #32]
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	43db      	mvns	r3, r3
 8002b52:	401a      	ands	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6a1a      	ldr	r2, [r3, #32]
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	f003 031f 	and.w	r3, r3, #31
 8002b62:	6879      	ldr	r1, [r7, #4]
 8002b64:	fa01 f303 	lsl.w	r3, r1, r3
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	621a      	str	r2, [r3, #32]
}
 8002b6e:	bf00      	nop
 8002b70:	371c      	adds	r7, #28
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
	...

08002b7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d101      	bne.n	8002b94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b90:	2302      	movs	r3, #2
 8002b92:	e050      	b.n	8002c36 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a1c      	ldr	r2, [pc, #112]	; (8002c44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d018      	beq.n	8002c0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be0:	d013      	beq.n	8002c0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a18      	ldr	r2, [pc, #96]	; (8002c48 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d00e      	beq.n	8002c0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a16      	ldr	r2, [pc, #88]	; (8002c4c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d009      	beq.n	8002c0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a15      	ldr	r2, [pc, #84]	; (8002c50 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d004      	beq.n	8002c0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a13      	ldr	r2, [pc, #76]	; (8002c54 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d10c      	bne.n	8002c24 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68ba      	ldr	r2, [r7, #8]
 8002c22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3714      	adds	r7, #20
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	40010000 	.word	0x40010000
 8002c48:	40000400 	.word	0x40000400
 8002c4c:	40000800 	.word	0x40000800
 8002c50:	40000c00 	.word	0x40000c00
 8002c54:	40014000 	.word	0x40014000

08002c58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e03f      	b.n	8002cea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d106      	bne.n	8002c84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7fd ff88 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2224      	movs	r2, #36	; 0x24
 8002c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68da      	ldr	r2, [r3, #12]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 f929 	bl	8002ef4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	691a      	ldr	r2, [r3, #16]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	695a      	ldr	r2, [r3, #20]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68da      	ldr	r2, [r3, #12]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2220      	movs	r2, #32
 8002cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b08a      	sub	sp, #40	; 0x28
 8002cf6:	af02      	add	r7, sp, #8
 8002cf8:	60f8      	str	r0, [r7, #12]
 8002cfa:	60b9      	str	r1, [r7, #8]
 8002cfc:	603b      	str	r3, [r7, #0]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d02:	2300      	movs	r3, #0
 8002d04:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b20      	cmp	r3, #32
 8002d10:	d17c      	bne.n	8002e0c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d002      	beq.n	8002d1e <HAL_UART_Transmit+0x2c>
 8002d18:	88fb      	ldrh	r3, [r7, #6]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e075      	b.n	8002e0e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d101      	bne.n	8002d30 <HAL_UART_Transmit+0x3e>
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	e06e      	b.n	8002e0e <HAL_UART_Transmit+0x11c>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2221      	movs	r2, #33	; 0x21
 8002d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d46:	f7fe f8c9 	bl	8000edc <HAL_GetTick>
 8002d4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	88fa      	ldrh	r2, [r7, #6]
 8002d50:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	88fa      	ldrh	r2, [r7, #6]
 8002d56:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d60:	d108      	bne.n	8002d74 <HAL_UART_Transmit+0x82>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d104      	bne.n	8002d74 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	61bb      	str	r3, [r7, #24]
 8002d72:	e003      	b.n	8002d7c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002d84:	e02a      	b.n	8002ddc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	2180      	movs	r1, #128	; 0x80
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f000 f840 	bl	8002e16 <UART_WaitOnFlagUntilTimeout>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e036      	b.n	8002e0e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10b      	bne.n	8002dbe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	461a      	mov	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002db4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	3302      	adds	r3, #2
 8002dba:	61bb      	str	r3, [r7, #24]
 8002dbc:	e007      	b.n	8002dce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	781a      	ldrb	r2, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1cf      	bne.n	8002d86 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	2200      	movs	r2, #0
 8002dee:	2140      	movs	r1, #64	; 0x40
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f000 f810 	bl	8002e16 <UART_WaitOnFlagUntilTimeout>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e006      	b.n	8002e0e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2220      	movs	r2, #32
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	e000      	b.n	8002e0e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002e0c:	2302      	movs	r3, #2
  }
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3720      	adds	r7, #32
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b090      	sub	sp, #64	; 0x40
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	60f8      	str	r0, [r7, #12]
 8002e1e:	60b9      	str	r1, [r7, #8]
 8002e20:	603b      	str	r3, [r7, #0]
 8002e22:	4613      	mov	r3, r2
 8002e24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e26:	e050      	b.n	8002eca <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e2e:	d04c      	beq.n	8002eca <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d007      	beq.n	8002e46 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e36:	f7fe f851 	bl	8000edc <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d241      	bcs.n	8002eca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	330c      	adds	r3, #12
 8002e4c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e50:	e853 3f00 	ldrex	r3, [r3]
 8002e54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	330c      	adds	r3, #12
 8002e64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e66:	637a      	str	r2, [r7, #52]	; 0x34
 8002e68:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e6e:	e841 2300 	strex	r3, r2, [r1]
 8002e72:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1e5      	bne.n	8002e46 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	3314      	adds	r3, #20
 8002e80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	e853 3f00 	ldrex	r3, [r3]
 8002e88:	613b      	str	r3, [r7, #16]
   return(result);
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	f023 0301 	bic.w	r3, r3, #1
 8002e90:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	3314      	adds	r3, #20
 8002e98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e9a:	623a      	str	r2, [r7, #32]
 8002e9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e9e:	69f9      	ldr	r1, [r7, #28]
 8002ea0:	6a3a      	ldr	r2, [r7, #32]
 8002ea2:	e841 2300 	strex	r3, r2, [r1]
 8002ea6:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1e5      	bne.n	8002e7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2220      	movs	r2, #32
 8002eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2220      	movs	r2, #32
 8002eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e00f      	b.n	8002eea <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	68ba      	ldr	r2, [r7, #8]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	bf0c      	ite	eq
 8002eda:	2301      	moveq	r3, #1
 8002edc:	2300      	movne	r3, #0
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	79fb      	ldrb	r3, [r7, #7]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d09f      	beq.n	8002e28 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3740      	adds	r7, #64	; 0x40
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
	...

08002ef4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ef8:	b09f      	sub	sp, #124	; 0x7c
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f0a:	68d9      	ldr	r1, [r3, #12]
 8002f0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	ea40 0301 	orr.w	r3, r0, r1
 8002f14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f18:	689a      	ldr	r2, [r3, #8]
 8002f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f22:	695b      	ldr	r3, [r3, #20]
 8002f24:	431a      	orrs	r2, r3
 8002f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002f2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f38:	f021 010c 	bic.w	r1, r1, #12
 8002f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f42:	430b      	orrs	r3, r1
 8002f44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f52:	6999      	ldr	r1, [r3, #24]
 8002f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	ea40 0301 	orr.w	r3, r0, r1
 8002f5c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	4bc5      	ldr	r3, [pc, #788]	; (8003278 <UART_SetConfig+0x384>)
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d004      	beq.n	8002f72 <UART_SetConfig+0x7e>
 8002f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	4bc3      	ldr	r3, [pc, #780]	; (800327c <UART_SetConfig+0x388>)
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d103      	bne.n	8002f7a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f72:	f7fe ffe7 	bl	8001f44 <HAL_RCC_GetPCLK2Freq>
 8002f76:	6778      	str	r0, [r7, #116]	; 0x74
 8002f78:	e002      	b.n	8002f80 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f7a:	f7fe ffcf 	bl	8001f1c <HAL_RCC_GetPCLK1Freq>
 8002f7e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f82:	69db      	ldr	r3, [r3, #28]
 8002f84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f88:	f040 80b6 	bne.w	80030f8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f8e:	461c      	mov	r4, r3
 8002f90:	f04f 0500 	mov.w	r5, #0
 8002f94:	4622      	mov	r2, r4
 8002f96:	462b      	mov	r3, r5
 8002f98:	1891      	adds	r1, r2, r2
 8002f9a:	6439      	str	r1, [r7, #64]	; 0x40
 8002f9c:	415b      	adcs	r3, r3
 8002f9e:	647b      	str	r3, [r7, #68]	; 0x44
 8002fa0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002fa4:	1912      	adds	r2, r2, r4
 8002fa6:	eb45 0303 	adc.w	r3, r5, r3
 8002faa:	f04f 0000 	mov.w	r0, #0
 8002fae:	f04f 0100 	mov.w	r1, #0
 8002fb2:	00d9      	lsls	r1, r3, #3
 8002fb4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002fb8:	00d0      	lsls	r0, r2, #3
 8002fba:	4602      	mov	r2, r0
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	1911      	adds	r1, r2, r4
 8002fc0:	6639      	str	r1, [r7, #96]	; 0x60
 8002fc2:	416b      	adcs	r3, r5
 8002fc4:	667b      	str	r3, [r7, #100]	; 0x64
 8002fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	f04f 0300 	mov.w	r3, #0
 8002fd0:	1891      	adds	r1, r2, r2
 8002fd2:	63b9      	str	r1, [r7, #56]	; 0x38
 8002fd4:	415b      	adcs	r3, r3
 8002fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002fdc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002fe0:	f7fd f8f8 	bl	80001d4 <__aeabi_uldivmod>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	4ba5      	ldr	r3, [pc, #660]	; (8003280 <UART_SetConfig+0x38c>)
 8002fea:	fba3 2302 	umull	r2, r3, r3, r2
 8002fee:	095b      	lsrs	r3, r3, #5
 8002ff0:	011e      	lsls	r6, r3, #4
 8002ff2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ff4:	461c      	mov	r4, r3
 8002ff6:	f04f 0500 	mov.w	r5, #0
 8002ffa:	4622      	mov	r2, r4
 8002ffc:	462b      	mov	r3, r5
 8002ffe:	1891      	adds	r1, r2, r2
 8003000:	6339      	str	r1, [r7, #48]	; 0x30
 8003002:	415b      	adcs	r3, r3
 8003004:	637b      	str	r3, [r7, #52]	; 0x34
 8003006:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800300a:	1912      	adds	r2, r2, r4
 800300c:	eb45 0303 	adc.w	r3, r5, r3
 8003010:	f04f 0000 	mov.w	r0, #0
 8003014:	f04f 0100 	mov.w	r1, #0
 8003018:	00d9      	lsls	r1, r3, #3
 800301a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800301e:	00d0      	lsls	r0, r2, #3
 8003020:	4602      	mov	r2, r0
 8003022:	460b      	mov	r3, r1
 8003024:	1911      	adds	r1, r2, r4
 8003026:	65b9      	str	r1, [r7, #88]	; 0x58
 8003028:	416b      	adcs	r3, r5
 800302a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800302c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	461a      	mov	r2, r3
 8003032:	f04f 0300 	mov.w	r3, #0
 8003036:	1891      	adds	r1, r2, r2
 8003038:	62b9      	str	r1, [r7, #40]	; 0x28
 800303a:	415b      	adcs	r3, r3
 800303c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800303e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003042:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003046:	f7fd f8c5 	bl	80001d4 <__aeabi_uldivmod>
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	4b8c      	ldr	r3, [pc, #560]	; (8003280 <UART_SetConfig+0x38c>)
 8003050:	fba3 1302 	umull	r1, r3, r3, r2
 8003054:	095b      	lsrs	r3, r3, #5
 8003056:	2164      	movs	r1, #100	; 0x64
 8003058:	fb01 f303 	mul.w	r3, r1, r3
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	3332      	adds	r3, #50	; 0x32
 8003062:	4a87      	ldr	r2, [pc, #540]	; (8003280 <UART_SetConfig+0x38c>)
 8003064:	fba2 2303 	umull	r2, r3, r2, r3
 8003068:	095b      	lsrs	r3, r3, #5
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003070:	441e      	add	r6, r3
 8003072:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003074:	4618      	mov	r0, r3
 8003076:	f04f 0100 	mov.w	r1, #0
 800307a:	4602      	mov	r2, r0
 800307c:	460b      	mov	r3, r1
 800307e:	1894      	adds	r4, r2, r2
 8003080:	623c      	str	r4, [r7, #32]
 8003082:	415b      	adcs	r3, r3
 8003084:	627b      	str	r3, [r7, #36]	; 0x24
 8003086:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800308a:	1812      	adds	r2, r2, r0
 800308c:	eb41 0303 	adc.w	r3, r1, r3
 8003090:	f04f 0400 	mov.w	r4, #0
 8003094:	f04f 0500 	mov.w	r5, #0
 8003098:	00dd      	lsls	r5, r3, #3
 800309a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800309e:	00d4      	lsls	r4, r2, #3
 80030a0:	4622      	mov	r2, r4
 80030a2:	462b      	mov	r3, r5
 80030a4:	1814      	adds	r4, r2, r0
 80030a6:	653c      	str	r4, [r7, #80]	; 0x50
 80030a8:	414b      	adcs	r3, r1
 80030aa:	657b      	str	r3, [r7, #84]	; 0x54
 80030ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	461a      	mov	r2, r3
 80030b2:	f04f 0300 	mov.w	r3, #0
 80030b6:	1891      	adds	r1, r2, r2
 80030b8:	61b9      	str	r1, [r7, #24]
 80030ba:	415b      	adcs	r3, r3
 80030bc:	61fb      	str	r3, [r7, #28]
 80030be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030c2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80030c6:	f7fd f885 	bl	80001d4 <__aeabi_uldivmod>
 80030ca:	4602      	mov	r2, r0
 80030cc:	460b      	mov	r3, r1
 80030ce:	4b6c      	ldr	r3, [pc, #432]	; (8003280 <UART_SetConfig+0x38c>)
 80030d0:	fba3 1302 	umull	r1, r3, r3, r2
 80030d4:	095b      	lsrs	r3, r3, #5
 80030d6:	2164      	movs	r1, #100	; 0x64
 80030d8:	fb01 f303 	mul.w	r3, r1, r3
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	3332      	adds	r3, #50	; 0x32
 80030e2:	4a67      	ldr	r2, [pc, #412]	; (8003280 <UART_SetConfig+0x38c>)
 80030e4:	fba2 2303 	umull	r2, r3, r2, r3
 80030e8:	095b      	lsrs	r3, r3, #5
 80030ea:	f003 0207 	and.w	r2, r3, #7
 80030ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4432      	add	r2, r6
 80030f4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80030f6:	e0b9      	b.n	800326c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030fa:	461c      	mov	r4, r3
 80030fc:	f04f 0500 	mov.w	r5, #0
 8003100:	4622      	mov	r2, r4
 8003102:	462b      	mov	r3, r5
 8003104:	1891      	adds	r1, r2, r2
 8003106:	6139      	str	r1, [r7, #16]
 8003108:	415b      	adcs	r3, r3
 800310a:	617b      	str	r3, [r7, #20]
 800310c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003110:	1912      	adds	r2, r2, r4
 8003112:	eb45 0303 	adc.w	r3, r5, r3
 8003116:	f04f 0000 	mov.w	r0, #0
 800311a:	f04f 0100 	mov.w	r1, #0
 800311e:	00d9      	lsls	r1, r3, #3
 8003120:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003124:	00d0      	lsls	r0, r2, #3
 8003126:	4602      	mov	r2, r0
 8003128:	460b      	mov	r3, r1
 800312a:	eb12 0804 	adds.w	r8, r2, r4
 800312e:	eb43 0905 	adc.w	r9, r3, r5
 8003132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	4618      	mov	r0, r3
 8003138:	f04f 0100 	mov.w	r1, #0
 800313c:	f04f 0200 	mov.w	r2, #0
 8003140:	f04f 0300 	mov.w	r3, #0
 8003144:	008b      	lsls	r3, r1, #2
 8003146:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800314a:	0082      	lsls	r2, r0, #2
 800314c:	4640      	mov	r0, r8
 800314e:	4649      	mov	r1, r9
 8003150:	f7fd f840 	bl	80001d4 <__aeabi_uldivmod>
 8003154:	4602      	mov	r2, r0
 8003156:	460b      	mov	r3, r1
 8003158:	4b49      	ldr	r3, [pc, #292]	; (8003280 <UART_SetConfig+0x38c>)
 800315a:	fba3 2302 	umull	r2, r3, r3, r2
 800315e:	095b      	lsrs	r3, r3, #5
 8003160:	011e      	lsls	r6, r3, #4
 8003162:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003164:	4618      	mov	r0, r3
 8003166:	f04f 0100 	mov.w	r1, #0
 800316a:	4602      	mov	r2, r0
 800316c:	460b      	mov	r3, r1
 800316e:	1894      	adds	r4, r2, r2
 8003170:	60bc      	str	r4, [r7, #8]
 8003172:	415b      	adcs	r3, r3
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800317a:	1812      	adds	r2, r2, r0
 800317c:	eb41 0303 	adc.w	r3, r1, r3
 8003180:	f04f 0400 	mov.w	r4, #0
 8003184:	f04f 0500 	mov.w	r5, #0
 8003188:	00dd      	lsls	r5, r3, #3
 800318a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800318e:	00d4      	lsls	r4, r2, #3
 8003190:	4622      	mov	r2, r4
 8003192:	462b      	mov	r3, r5
 8003194:	1814      	adds	r4, r2, r0
 8003196:	64bc      	str	r4, [r7, #72]	; 0x48
 8003198:	414b      	adcs	r3, r1
 800319a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800319c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f04f 0100 	mov.w	r1, #0
 80031a6:	f04f 0200 	mov.w	r2, #0
 80031aa:	f04f 0300 	mov.w	r3, #0
 80031ae:	008b      	lsls	r3, r1, #2
 80031b0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80031b4:	0082      	lsls	r2, r0, #2
 80031b6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80031ba:	f7fd f80b 	bl	80001d4 <__aeabi_uldivmod>
 80031be:	4602      	mov	r2, r0
 80031c0:	460b      	mov	r3, r1
 80031c2:	4b2f      	ldr	r3, [pc, #188]	; (8003280 <UART_SetConfig+0x38c>)
 80031c4:	fba3 1302 	umull	r1, r3, r3, r2
 80031c8:	095b      	lsrs	r3, r3, #5
 80031ca:	2164      	movs	r1, #100	; 0x64
 80031cc:	fb01 f303 	mul.w	r3, r1, r3
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	011b      	lsls	r3, r3, #4
 80031d4:	3332      	adds	r3, #50	; 0x32
 80031d6:	4a2a      	ldr	r2, [pc, #168]	; (8003280 <UART_SetConfig+0x38c>)
 80031d8:	fba2 2303 	umull	r2, r3, r2, r3
 80031dc:	095b      	lsrs	r3, r3, #5
 80031de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031e2:	441e      	add	r6, r3
 80031e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031e6:	4618      	mov	r0, r3
 80031e8:	f04f 0100 	mov.w	r1, #0
 80031ec:	4602      	mov	r2, r0
 80031ee:	460b      	mov	r3, r1
 80031f0:	1894      	adds	r4, r2, r2
 80031f2:	603c      	str	r4, [r7, #0]
 80031f4:	415b      	adcs	r3, r3
 80031f6:	607b      	str	r3, [r7, #4]
 80031f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031fc:	1812      	adds	r2, r2, r0
 80031fe:	eb41 0303 	adc.w	r3, r1, r3
 8003202:	f04f 0400 	mov.w	r4, #0
 8003206:	f04f 0500 	mov.w	r5, #0
 800320a:	00dd      	lsls	r5, r3, #3
 800320c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003210:	00d4      	lsls	r4, r2, #3
 8003212:	4622      	mov	r2, r4
 8003214:	462b      	mov	r3, r5
 8003216:	eb12 0a00 	adds.w	sl, r2, r0
 800321a:	eb43 0b01 	adc.w	fp, r3, r1
 800321e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	4618      	mov	r0, r3
 8003224:	f04f 0100 	mov.w	r1, #0
 8003228:	f04f 0200 	mov.w	r2, #0
 800322c:	f04f 0300 	mov.w	r3, #0
 8003230:	008b      	lsls	r3, r1, #2
 8003232:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003236:	0082      	lsls	r2, r0, #2
 8003238:	4650      	mov	r0, sl
 800323a:	4659      	mov	r1, fp
 800323c:	f7fc ffca 	bl	80001d4 <__aeabi_uldivmod>
 8003240:	4602      	mov	r2, r0
 8003242:	460b      	mov	r3, r1
 8003244:	4b0e      	ldr	r3, [pc, #56]	; (8003280 <UART_SetConfig+0x38c>)
 8003246:	fba3 1302 	umull	r1, r3, r3, r2
 800324a:	095b      	lsrs	r3, r3, #5
 800324c:	2164      	movs	r1, #100	; 0x64
 800324e:	fb01 f303 	mul.w	r3, r1, r3
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	011b      	lsls	r3, r3, #4
 8003256:	3332      	adds	r3, #50	; 0x32
 8003258:	4a09      	ldr	r2, [pc, #36]	; (8003280 <UART_SetConfig+0x38c>)
 800325a:	fba2 2303 	umull	r2, r3, r2, r3
 800325e:	095b      	lsrs	r3, r3, #5
 8003260:	f003 020f 	and.w	r2, r3, #15
 8003264:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4432      	add	r2, r6
 800326a:	609a      	str	r2, [r3, #8]
}
 800326c:	bf00      	nop
 800326e:	377c      	adds	r7, #124	; 0x7c
 8003270:	46bd      	mov	sp, r7
 8003272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003276:	bf00      	nop
 8003278:	40011000 	.word	0x40011000
 800327c:	40011400 	.word	0x40011400
 8003280:	51eb851f 	.word	0x51eb851f

08003284 <__errno>:
 8003284:	4b01      	ldr	r3, [pc, #4]	; (800328c <__errno+0x8>)
 8003286:	6818      	ldr	r0, [r3, #0]
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	2000000c 	.word	0x2000000c

08003290 <__libc_init_array>:
 8003290:	b570      	push	{r4, r5, r6, lr}
 8003292:	4d0d      	ldr	r5, [pc, #52]	; (80032c8 <__libc_init_array+0x38>)
 8003294:	4c0d      	ldr	r4, [pc, #52]	; (80032cc <__libc_init_array+0x3c>)
 8003296:	1b64      	subs	r4, r4, r5
 8003298:	10a4      	asrs	r4, r4, #2
 800329a:	2600      	movs	r6, #0
 800329c:	42a6      	cmp	r6, r4
 800329e:	d109      	bne.n	80032b4 <__libc_init_array+0x24>
 80032a0:	4d0b      	ldr	r5, [pc, #44]	; (80032d0 <__libc_init_array+0x40>)
 80032a2:	4c0c      	ldr	r4, [pc, #48]	; (80032d4 <__libc_init_array+0x44>)
 80032a4:	f000 fc36 	bl	8003b14 <_init>
 80032a8:	1b64      	subs	r4, r4, r5
 80032aa:	10a4      	asrs	r4, r4, #2
 80032ac:	2600      	movs	r6, #0
 80032ae:	42a6      	cmp	r6, r4
 80032b0:	d105      	bne.n	80032be <__libc_init_array+0x2e>
 80032b2:	bd70      	pop	{r4, r5, r6, pc}
 80032b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80032b8:	4798      	blx	r3
 80032ba:	3601      	adds	r6, #1
 80032bc:	e7ee      	b.n	800329c <__libc_init_array+0xc>
 80032be:	f855 3b04 	ldr.w	r3, [r5], #4
 80032c2:	4798      	blx	r3
 80032c4:	3601      	adds	r6, #1
 80032c6:	e7f2      	b.n	80032ae <__libc_init_array+0x1e>
 80032c8:	08003bb0 	.word	0x08003bb0
 80032cc:	08003bb0 	.word	0x08003bb0
 80032d0:	08003bb0 	.word	0x08003bb0
 80032d4:	08003bb4 	.word	0x08003bb4

080032d8 <memset>:
 80032d8:	4402      	add	r2, r0
 80032da:	4603      	mov	r3, r0
 80032dc:	4293      	cmp	r3, r2
 80032de:	d100      	bne.n	80032e2 <memset+0xa>
 80032e0:	4770      	bx	lr
 80032e2:	f803 1b01 	strb.w	r1, [r3], #1
 80032e6:	e7f9      	b.n	80032dc <memset+0x4>

080032e8 <setbuf>:
 80032e8:	2900      	cmp	r1, #0
 80032ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032ee:	bf0c      	ite	eq
 80032f0:	2202      	moveq	r2, #2
 80032f2:	2200      	movne	r2, #0
 80032f4:	f000 b800 	b.w	80032f8 <setvbuf>

080032f8 <setvbuf>:
 80032f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80032fc:	461d      	mov	r5, r3
 80032fe:	4b5d      	ldr	r3, [pc, #372]	; (8003474 <setvbuf+0x17c>)
 8003300:	681f      	ldr	r7, [r3, #0]
 8003302:	4604      	mov	r4, r0
 8003304:	460e      	mov	r6, r1
 8003306:	4690      	mov	r8, r2
 8003308:	b127      	cbz	r7, 8003314 <setvbuf+0x1c>
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	b913      	cbnz	r3, 8003314 <setvbuf+0x1c>
 800330e:	4638      	mov	r0, r7
 8003310:	f000 f9d2 	bl	80036b8 <__sinit>
 8003314:	4b58      	ldr	r3, [pc, #352]	; (8003478 <setvbuf+0x180>)
 8003316:	429c      	cmp	r4, r3
 8003318:	d167      	bne.n	80033ea <setvbuf+0xf2>
 800331a:	687c      	ldr	r4, [r7, #4]
 800331c:	f1b8 0f02 	cmp.w	r8, #2
 8003320:	d006      	beq.n	8003330 <setvbuf+0x38>
 8003322:	f1b8 0f01 	cmp.w	r8, #1
 8003326:	f200 809f 	bhi.w	8003468 <setvbuf+0x170>
 800332a:	2d00      	cmp	r5, #0
 800332c:	f2c0 809c 	blt.w	8003468 <setvbuf+0x170>
 8003330:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003332:	07db      	lsls	r3, r3, #31
 8003334:	d405      	bmi.n	8003342 <setvbuf+0x4a>
 8003336:	89a3      	ldrh	r3, [r4, #12]
 8003338:	0598      	lsls	r0, r3, #22
 800333a:	d402      	bmi.n	8003342 <setvbuf+0x4a>
 800333c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800333e:	f000 fa59 	bl	80037f4 <__retarget_lock_acquire_recursive>
 8003342:	4621      	mov	r1, r4
 8003344:	4638      	mov	r0, r7
 8003346:	f000 f923 	bl	8003590 <_fflush_r>
 800334a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800334c:	b141      	cbz	r1, 8003360 <setvbuf+0x68>
 800334e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003352:	4299      	cmp	r1, r3
 8003354:	d002      	beq.n	800335c <setvbuf+0x64>
 8003356:	4638      	mov	r0, r7
 8003358:	f000 fa7a 	bl	8003850 <_free_r>
 800335c:	2300      	movs	r3, #0
 800335e:	6363      	str	r3, [r4, #52]	; 0x34
 8003360:	2300      	movs	r3, #0
 8003362:	61a3      	str	r3, [r4, #24]
 8003364:	6063      	str	r3, [r4, #4]
 8003366:	89a3      	ldrh	r3, [r4, #12]
 8003368:	0619      	lsls	r1, r3, #24
 800336a:	d503      	bpl.n	8003374 <setvbuf+0x7c>
 800336c:	6921      	ldr	r1, [r4, #16]
 800336e:	4638      	mov	r0, r7
 8003370:	f000 fa6e 	bl	8003850 <_free_r>
 8003374:	89a3      	ldrh	r3, [r4, #12]
 8003376:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800337a:	f023 0303 	bic.w	r3, r3, #3
 800337e:	f1b8 0f02 	cmp.w	r8, #2
 8003382:	81a3      	strh	r3, [r4, #12]
 8003384:	d06c      	beq.n	8003460 <setvbuf+0x168>
 8003386:	ab01      	add	r3, sp, #4
 8003388:	466a      	mov	r2, sp
 800338a:	4621      	mov	r1, r4
 800338c:	4638      	mov	r0, r7
 800338e:	f000 fa33 	bl	80037f8 <__swhatbuf_r>
 8003392:	89a3      	ldrh	r3, [r4, #12]
 8003394:	4318      	orrs	r0, r3
 8003396:	81a0      	strh	r0, [r4, #12]
 8003398:	2d00      	cmp	r5, #0
 800339a:	d130      	bne.n	80033fe <setvbuf+0x106>
 800339c:	9d00      	ldr	r5, [sp, #0]
 800339e:	4628      	mov	r0, r5
 80033a0:	f000 fa4e 	bl	8003840 <malloc>
 80033a4:	4606      	mov	r6, r0
 80033a6:	2800      	cmp	r0, #0
 80033a8:	d155      	bne.n	8003456 <setvbuf+0x15e>
 80033aa:	f8dd 9000 	ldr.w	r9, [sp]
 80033ae:	45a9      	cmp	r9, r5
 80033b0:	d14a      	bne.n	8003448 <setvbuf+0x150>
 80033b2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80033b6:	2200      	movs	r2, #0
 80033b8:	60a2      	str	r2, [r4, #8]
 80033ba:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80033be:	6022      	str	r2, [r4, #0]
 80033c0:	6122      	str	r2, [r4, #16]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033c8:	6162      	str	r2, [r4, #20]
 80033ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80033cc:	f043 0302 	orr.w	r3, r3, #2
 80033d0:	07d2      	lsls	r2, r2, #31
 80033d2:	81a3      	strh	r3, [r4, #12]
 80033d4:	d405      	bmi.n	80033e2 <setvbuf+0xea>
 80033d6:	f413 7f00 	tst.w	r3, #512	; 0x200
 80033da:	d102      	bne.n	80033e2 <setvbuf+0xea>
 80033dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033de:	f000 fa0a 	bl	80037f6 <__retarget_lock_release_recursive>
 80033e2:	4628      	mov	r0, r5
 80033e4:	b003      	add	sp, #12
 80033e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80033ea:	4b24      	ldr	r3, [pc, #144]	; (800347c <setvbuf+0x184>)
 80033ec:	429c      	cmp	r4, r3
 80033ee:	d101      	bne.n	80033f4 <setvbuf+0xfc>
 80033f0:	68bc      	ldr	r4, [r7, #8]
 80033f2:	e793      	b.n	800331c <setvbuf+0x24>
 80033f4:	4b22      	ldr	r3, [pc, #136]	; (8003480 <setvbuf+0x188>)
 80033f6:	429c      	cmp	r4, r3
 80033f8:	bf08      	it	eq
 80033fa:	68fc      	ldreq	r4, [r7, #12]
 80033fc:	e78e      	b.n	800331c <setvbuf+0x24>
 80033fe:	2e00      	cmp	r6, #0
 8003400:	d0cd      	beq.n	800339e <setvbuf+0xa6>
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	b913      	cbnz	r3, 800340c <setvbuf+0x114>
 8003406:	4638      	mov	r0, r7
 8003408:	f000 f956 	bl	80036b8 <__sinit>
 800340c:	f1b8 0f01 	cmp.w	r8, #1
 8003410:	bf08      	it	eq
 8003412:	89a3      	ldrheq	r3, [r4, #12]
 8003414:	6026      	str	r6, [r4, #0]
 8003416:	bf04      	itt	eq
 8003418:	f043 0301 	orreq.w	r3, r3, #1
 800341c:	81a3      	strheq	r3, [r4, #12]
 800341e:	89a2      	ldrh	r2, [r4, #12]
 8003420:	f012 0308 	ands.w	r3, r2, #8
 8003424:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003428:	d01c      	beq.n	8003464 <setvbuf+0x16c>
 800342a:	07d3      	lsls	r3, r2, #31
 800342c:	bf41      	itttt	mi
 800342e:	2300      	movmi	r3, #0
 8003430:	426d      	negmi	r5, r5
 8003432:	60a3      	strmi	r3, [r4, #8]
 8003434:	61a5      	strmi	r5, [r4, #24]
 8003436:	bf58      	it	pl
 8003438:	60a5      	strpl	r5, [r4, #8]
 800343a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800343c:	f015 0501 	ands.w	r5, r5, #1
 8003440:	d115      	bne.n	800346e <setvbuf+0x176>
 8003442:	f412 7f00 	tst.w	r2, #512	; 0x200
 8003446:	e7c8      	b.n	80033da <setvbuf+0xe2>
 8003448:	4648      	mov	r0, r9
 800344a:	f000 f9f9 	bl	8003840 <malloc>
 800344e:	4606      	mov	r6, r0
 8003450:	2800      	cmp	r0, #0
 8003452:	d0ae      	beq.n	80033b2 <setvbuf+0xba>
 8003454:	464d      	mov	r5, r9
 8003456:	89a3      	ldrh	r3, [r4, #12]
 8003458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800345c:	81a3      	strh	r3, [r4, #12]
 800345e:	e7d0      	b.n	8003402 <setvbuf+0x10a>
 8003460:	2500      	movs	r5, #0
 8003462:	e7a8      	b.n	80033b6 <setvbuf+0xbe>
 8003464:	60a3      	str	r3, [r4, #8]
 8003466:	e7e8      	b.n	800343a <setvbuf+0x142>
 8003468:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800346c:	e7b9      	b.n	80033e2 <setvbuf+0xea>
 800346e:	2500      	movs	r5, #0
 8003470:	e7b7      	b.n	80033e2 <setvbuf+0xea>
 8003472:	bf00      	nop
 8003474:	2000000c 	.word	0x2000000c
 8003478:	08003b68 	.word	0x08003b68
 800347c:	08003b88 	.word	0x08003b88
 8003480:	08003b48 	.word	0x08003b48

08003484 <__sflush_r>:
 8003484:	898a      	ldrh	r2, [r1, #12]
 8003486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800348a:	4605      	mov	r5, r0
 800348c:	0710      	lsls	r0, r2, #28
 800348e:	460c      	mov	r4, r1
 8003490:	d458      	bmi.n	8003544 <__sflush_r+0xc0>
 8003492:	684b      	ldr	r3, [r1, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	dc05      	bgt.n	80034a4 <__sflush_r+0x20>
 8003498:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800349a:	2b00      	cmp	r3, #0
 800349c:	dc02      	bgt.n	80034a4 <__sflush_r+0x20>
 800349e:	2000      	movs	r0, #0
 80034a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80034a6:	2e00      	cmp	r6, #0
 80034a8:	d0f9      	beq.n	800349e <__sflush_r+0x1a>
 80034aa:	2300      	movs	r3, #0
 80034ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80034b0:	682f      	ldr	r7, [r5, #0]
 80034b2:	602b      	str	r3, [r5, #0]
 80034b4:	d032      	beq.n	800351c <__sflush_r+0x98>
 80034b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80034b8:	89a3      	ldrh	r3, [r4, #12]
 80034ba:	075a      	lsls	r2, r3, #29
 80034bc:	d505      	bpl.n	80034ca <__sflush_r+0x46>
 80034be:	6863      	ldr	r3, [r4, #4]
 80034c0:	1ac0      	subs	r0, r0, r3
 80034c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80034c4:	b10b      	cbz	r3, 80034ca <__sflush_r+0x46>
 80034c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034c8:	1ac0      	subs	r0, r0, r3
 80034ca:	2300      	movs	r3, #0
 80034cc:	4602      	mov	r2, r0
 80034ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80034d0:	6a21      	ldr	r1, [r4, #32]
 80034d2:	4628      	mov	r0, r5
 80034d4:	47b0      	blx	r6
 80034d6:	1c43      	adds	r3, r0, #1
 80034d8:	89a3      	ldrh	r3, [r4, #12]
 80034da:	d106      	bne.n	80034ea <__sflush_r+0x66>
 80034dc:	6829      	ldr	r1, [r5, #0]
 80034de:	291d      	cmp	r1, #29
 80034e0:	d82c      	bhi.n	800353c <__sflush_r+0xb8>
 80034e2:	4a2a      	ldr	r2, [pc, #168]	; (800358c <__sflush_r+0x108>)
 80034e4:	40ca      	lsrs	r2, r1
 80034e6:	07d6      	lsls	r6, r2, #31
 80034e8:	d528      	bpl.n	800353c <__sflush_r+0xb8>
 80034ea:	2200      	movs	r2, #0
 80034ec:	6062      	str	r2, [r4, #4]
 80034ee:	04d9      	lsls	r1, r3, #19
 80034f0:	6922      	ldr	r2, [r4, #16]
 80034f2:	6022      	str	r2, [r4, #0]
 80034f4:	d504      	bpl.n	8003500 <__sflush_r+0x7c>
 80034f6:	1c42      	adds	r2, r0, #1
 80034f8:	d101      	bne.n	80034fe <__sflush_r+0x7a>
 80034fa:	682b      	ldr	r3, [r5, #0]
 80034fc:	b903      	cbnz	r3, 8003500 <__sflush_r+0x7c>
 80034fe:	6560      	str	r0, [r4, #84]	; 0x54
 8003500:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003502:	602f      	str	r7, [r5, #0]
 8003504:	2900      	cmp	r1, #0
 8003506:	d0ca      	beq.n	800349e <__sflush_r+0x1a>
 8003508:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800350c:	4299      	cmp	r1, r3
 800350e:	d002      	beq.n	8003516 <__sflush_r+0x92>
 8003510:	4628      	mov	r0, r5
 8003512:	f000 f99d 	bl	8003850 <_free_r>
 8003516:	2000      	movs	r0, #0
 8003518:	6360      	str	r0, [r4, #52]	; 0x34
 800351a:	e7c1      	b.n	80034a0 <__sflush_r+0x1c>
 800351c:	6a21      	ldr	r1, [r4, #32]
 800351e:	2301      	movs	r3, #1
 8003520:	4628      	mov	r0, r5
 8003522:	47b0      	blx	r6
 8003524:	1c41      	adds	r1, r0, #1
 8003526:	d1c7      	bne.n	80034b8 <__sflush_r+0x34>
 8003528:	682b      	ldr	r3, [r5, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d0c4      	beq.n	80034b8 <__sflush_r+0x34>
 800352e:	2b1d      	cmp	r3, #29
 8003530:	d001      	beq.n	8003536 <__sflush_r+0xb2>
 8003532:	2b16      	cmp	r3, #22
 8003534:	d101      	bne.n	800353a <__sflush_r+0xb6>
 8003536:	602f      	str	r7, [r5, #0]
 8003538:	e7b1      	b.n	800349e <__sflush_r+0x1a>
 800353a:	89a3      	ldrh	r3, [r4, #12]
 800353c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003540:	81a3      	strh	r3, [r4, #12]
 8003542:	e7ad      	b.n	80034a0 <__sflush_r+0x1c>
 8003544:	690f      	ldr	r7, [r1, #16]
 8003546:	2f00      	cmp	r7, #0
 8003548:	d0a9      	beq.n	800349e <__sflush_r+0x1a>
 800354a:	0793      	lsls	r3, r2, #30
 800354c:	680e      	ldr	r6, [r1, #0]
 800354e:	bf08      	it	eq
 8003550:	694b      	ldreq	r3, [r1, #20]
 8003552:	600f      	str	r7, [r1, #0]
 8003554:	bf18      	it	ne
 8003556:	2300      	movne	r3, #0
 8003558:	eba6 0807 	sub.w	r8, r6, r7
 800355c:	608b      	str	r3, [r1, #8]
 800355e:	f1b8 0f00 	cmp.w	r8, #0
 8003562:	dd9c      	ble.n	800349e <__sflush_r+0x1a>
 8003564:	6a21      	ldr	r1, [r4, #32]
 8003566:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003568:	4643      	mov	r3, r8
 800356a:	463a      	mov	r2, r7
 800356c:	4628      	mov	r0, r5
 800356e:	47b0      	blx	r6
 8003570:	2800      	cmp	r0, #0
 8003572:	dc06      	bgt.n	8003582 <__sflush_r+0xfe>
 8003574:	89a3      	ldrh	r3, [r4, #12]
 8003576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800357a:	81a3      	strh	r3, [r4, #12]
 800357c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003580:	e78e      	b.n	80034a0 <__sflush_r+0x1c>
 8003582:	4407      	add	r7, r0
 8003584:	eba8 0800 	sub.w	r8, r8, r0
 8003588:	e7e9      	b.n	800355e <__sflush_r+0xda>
 800358a:	bf00      	nop
 800358c:	20400001 	.word	0x20400001

08003590 <_fflush_r>:
 8003590:	b538      	push	{r3, r4, r5, lr}
 8003592:	690b      	ldr	r3, [r1, #16]
 8003594:	4605      	mov	r5, r0
 8003596:	460c      	mov	r4, r1
 8003598:	b913      	cbnz	r3, 80035a0 <_fflush_r+0x10>
 800359a:	2500      	movs	r5, #0
 800359c:	4628      	mov	r0, r5
 800359e:	bd38      	pop	{r3, r4, r5, pc}
 80035a0:	b118      	cbz	r0, 80035aa <_fflush_r+0x1a>
 80035a2:	6983      	ldr	r3, [r0, #24]
 80035a4:	b90b      	cbnz	r3, 80035aa <_fflush_r+0x1a>
 80035a6:	f000 f887 	bl	80036b8 <__sinit>
 80035aa:	4b14      	ldr	r3, [pc, #80]	; (80035fc <_fflush_r+0x6c>)
 80035ac:	429c      	cmp	r4, r3
 80035ae:	d11b      	bne.n	80035e8 <_fflush_r+0x58>
 80035b0:	686c      	ldr	r4, [r5, #4]
 80035b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d0ef      	beq.n	800359a <_fflush_r+0xa>
 80035ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80035bc:	07d0      	lsls	r0, r2, #31
 80035be:	d404      	bmi.n	80035ca <_fflush_r+0x3a>
 80035c0:	0599      	lsls	r1, r3, #22
 80035c2:	d402      	bmi.n	80035ca <_fflush_r+0x3a>
 80035c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035c6:	f000 f915 	bl	80037f4 <__retarget_lock_acquire_recursive>
 80035ca:	4628      	mov	r0, r5
 80035cc:	4621      	mov	r1, r4
 80035ce:	f7ff ff59 	bl	8003484 <__sflush_r>
 80035d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80035d4:	07da      	lsls	r2, r3, #31
 80035d6:	4605      	mov	r5, r0
 80035d8:	d4e0      	bmi.n	800359c <_fflush_r+0xc>
 80035da:	89a3      	ldrh	r3, [r4, #12]
 80035dc:	059b      	lsls	r3, r3, #22
 80035de:	d4dd      	bmi.n	800359c <_fflush_r+0xc>
 80035e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035e2:	f000 f908 	bl	80037f6 <__retarget_lock_release_recursive>
 80035e6:	e7d9      	b.n	800359c <_fflush_r+0xc>
 80035e8:	4b05      	ldr	r3, [pc, #20]	; (8003600 <_fflush_r+0x70>)
 80035ea:	429c      	cmp	r4, r3
 80035ec:	d101      	bne.n	80035f2 <_fflush_r+0x62>
 80035ee:	68ac      	ldr	r4, [r5, #8]
 80035f0:	e7df      	b.n	80035b2 <_fflush_r+0x22>
 80035f2:	4b04      	ldr	r3, [pc, #16]	; (8003604 <_fflush_r+0x74>)
 80035f4:	429c      	cmp	r4, r3
 80035f6:	bf08      	it	eq
 80035f8:	68ec      	ldreq	r4, [r5, #12]
 80035fa:	e7da      	b.n	80035b2 <_fflush_r+0x22>
 80035fc:	08003b68 	.word	0x08003b68
 8003600:	08003b88 	.word	0x08003b88
 8003604:	08003b48 	.word	0x08003b48

08003608 <std>:
 8003608:	2300      	movs	r3, #0
 800360a:	b510      	push	{r4, lr}
 800360c:	4604      	mov	r4, r0
 800360e:	e9c0 3300 	strd	r3, r3, [r0]
 8003612:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003616:	6083      	str	r3, [r0, #8]
 8003618:	8181      	strh	r1, [r0, #12]
 800361a:	6643      	str	r3, [r0, #100]	; 0x64
 800361c:	81c2      	strh	r2, [r0, #14]
 800361e:	6183      	str	r3, [r0, #24]
 8003620:	4619      	mov	r1, r3
 8003622:	2208      	movs	r2, #8
 8003624:	305c      	adds	r0, #92	; 0x5c
 8003626:	f7ff fe57 	bl	80032d8 <memset>
 800362a:	4b05      	ldr	r3, [pc, #20]	; (8003640 <std+0x38>)
 800362c:	6263      	str	r3, [r4, #36]	; 0x24
 800362e:	4b05      	ldr	r3, [pc, #20]	; (8003644 <std+0x3c>)
 8003630:	62a3      	str	r3, [r4, #40]	; 0x28
 8003632:	4b05      	ldr	r3, [pc, #20]	; (8003648 <std+0x40>)
 8003634:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003636:	4b05      	ldr	r3, [pc, #20]	; (800364c <std+0x44>)
 8003638:	6224      	str	r4, [r4, #32]
 800363a:	6323      	str	r3, [r4, #48]	; 0x30
 800363c:	bd10      	pop	{r4, pc}
 800363e:	bf00      	nop
 8003640:	080039c5 	.word	0x080039c5
 8003644:	080039e7 	.word	0x080039e7
 8003648:	08003a1f 	.word	0x08003a1f
 800364c:	08003a43 	.word	0x08003a43

08003650 <_cleanup_r>:
 8003650:	4901      	ldr	r1, [pc, #4]	; (8003658 <_cleanup_r+0x8>)
 8003652:	f000 b8af 	b.w	80037b4 <_fwalk_reent>
 8003656:	bf00      	nop
 8003658:	08003591 	.word	0x08003591

0800365c <__sfmoreglue>:
 800365c:	b570      	push	{r4, r5, r6, lr}
 800365e:	1e4a      	subs	r2, r1, #1
 8003660:	2568      	movs	r5, #104	; 0x68
 8003662:	4355      	muls	r5, r2
 8003664:	460e      	mov	r6, r1
 8003666:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800366a:	f000 f941 	bl	80038f0 <_malloc_r>
 800366e:	4604      	mov	r4, r0
 8003670:	b140      	cbz	r0, 8003684 <__sfmoreglue+0x28>
 8003672:	2100      	movs	r1, #0
 8003674:	e9c0 1600 	strd	r1, r6, [r0]
 8003678:	300c      	adds	r0, #12
 800367a:	60a0      	str	r0, [r4, #8]
 800367c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003680:	f7ff fe2a 	bl	80032d8 <memset>
 8003684:	4620      	mov	r0, r4
 8003686:	bd70      	pop	{r4, r5, r6, pc}

08003688 <__sfp_lock_acquire>:
 8003688:	4801      	ldr	r0, [pc, #4]	; (8003690 <__sfp_lock_acquire+0x8>)
 800368a:	f000 b8b3 	b.w	80037f4 <__retarget_lock_acquire_recursive>
 800368e:	bf00      	nop
 8003690:	200001cc 	.word	0x200001cc

08003694 <__sfp_lock_release>:
 8003694:	4801      	ldr	r0, [pc, #4]	; (800369c <__sfp_lock_release+0x8>)
 8003696:	f000 b8ae 	b.w	80037f6 <__retarget_lock_release_recursive>
 800369a:	bf00      	nop
 800369c:	200001cc 	.word	0x200001cc

080036a0 <__sinit_lock_acquire>:
 80036a0:	4801      	ldr	r0, [pc, #4]	; (80036a8 <__sinit_lock_acquire+0x8>)
 80036a2:	f000 b8a7 	b.w	80037f4 <__retarget_lock_acquire_recursive>
 80036a6:	bf00      	nop
 80036a8:	200001c7 	.word	0x200001c7

080036ac <__sinit_lock_release>:
 80036ac:	4801      	ldr	r0, [pc, #4]	; (80036b4 <__sinit_lock_release+0x8>)
 80036ae:	f000 b8a2 	b.w	80037f6 <__retarget_lock_release_recursive>
 80036b2:	bf00      	nop
 80036b4:	200001c7 	.word	0x200001c7

080036b8 <__sinit>:
 80036b8:	b510      	push	{r4, lr}
 80036ba:	4604      	mov	r4, r0
 80036bc:	f7ff fff0 	bl	80036a0 <__sinit_lock_acquire>
 80036c0:	69a3      	ldr	r3, [r4, #24]
 80036c2:	b11b      	cbz	r3, 80036cc <__sinit+0x14>
 80036c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036c8:	f7ff bff0 	b.w	80036ac <__sinit_lock_release>
 80036cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80036d0:	6523      	str	r3, [r4, #80]	; 0x50
 80036d2:	4b13      	ldr	r3, [pc, #76]	; (8003720 <__sinit+0x68>)
 80036d4:	4a13      	ldr	r2, [pc, #76]	; (8003724 <__sinit+0x6c>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80036da:	42a3      	cmp	r3, r4
 80036dc:	bf04      	itt	eq
 80036de:	2301      	moveq	r3, #1
 80036e0:	61a3      	streq	r3, [r4, #24]
 80036e2:	4620      	mov	r0, r4
 80036e4:	f000 f820 	bl	8003728 <__sfp>
 80036e8:	6060      	str	r0, [r4, #4]
 80036ea:	4620      	mov	r0, r4
 80036ec:	f000 f81c 	bl	8003728 <__sfp>
 80036f0:	60a0      	str	r0, [r4, #8]
 80036f2:	4620      	mov	r0, r4
 80036f4:	f000 f818 	bl	8003728 <__sfp>
 80036f8:	2200      	movs	r2, #0
 80036fa:	60e0      	str	r0, [r4, #12]
 80036fc:	2104      	movs	r1, #4
 80036fe:	6860      	ldr	r0, [r4, #4]
 8003700:	f7ff ff82 	bl	8003608 <std>
 8003704:	68a0      	ldr	r0, [r4, #8]
 8003706:	2201      	movs	r2, #1
 8003708:	2109      	movs	r1, #9
 800370a:	f7ff ff7d 	bl	8003608 <std>
 800370e:	68e0      	ldr	r0, [r4, #12]
 8003710:	2202      	movs	r2, #2
 8003712:	2112      	movs	r1, #18
 8003714:	f7ff ff78 	bl	8003608 <std>
 8003718:	2301      	movs	r3, #1
 800371a:	61a3      	str	r3, [r4, #24]
 800371c:	e7d2      	b.n	80036c4 <__sinit+0xc>
 800371e:	bf00      	nop
 8003720:	08003b44 	.word	0x08003b44
 8003724:	08003651 	.word	0x08003651

08003728 <__sfp>:
 8003728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800372a:	4607      	mov	r7, r0
 800372c:	f7ff ffac 	bl	8003688 <__sfp_lock_acquire>
 8003730:	4b1e      	ldr	r3, [pc, #120]	; (80037ac <__sfp+0x84>)
 8003732:	681e      	ldr	r6, [r3, #0]
 8003734:	69b3      	ldr	r3, [r6, #24]
 8003736:	b913      	cbnz	r3, 800373e <__sfp+0x16>
 8003738:	4630      	mov	r0, r6
 800373a:	f7ff ffbd 	bl	80036b8 <__sinit>
 800373e:	3648      	adds	r6, #72	; 0x48
 8003740:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003744:	3b01      	subs	r3, #1
 8003746:	d503      	bpl.n	8003750 <__sfp+0x28>
 8003748:	6833      	ldr	r3, [r6, #0]
 800374a:	b30b      	cbz	r3, 8003790 <__sfp+0x68>
 800374c:	6836      	ldr	r6, [r6, #0]
 800374e:	e7f7      	b.n	8003740 <__sfp+0x18>
 8003750:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003754:	b9d5      	cbnz	r5, 800378c <__sfp+0x64>
 8003756:	4b16      	ldr	r3, [pc, #88]	; (80037b0 <__sfp+0x88>)
 8003758:	60e3      	str	r3, [r4, #12]
 800375a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800375e:	6665      	str	r5, [r4, #100]	; 0x64
 8003760:	f000 f847 	bl	80037f2 <__retarget_lock_init_recursive>
 8003764:	f7ff ff96 	bl	8003694 <__sfp_lock_release>
 8003768:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800376c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003770:	6025      	str	r5, [r4, #0]
 8003772:	61a5      	str	r5, [r4, #24]
 8003774:	2208      	movs	r2, #8
 8003776:	4629      	mov	r1, r5
 8003778:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800377c:	f7ff fdac 	bl	80032d8 <memset>
 8003780:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003784:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003788:	4620      	mov	r0, r4
 800378a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800378c:	3468      	adds	r4, #104	; 0x68
 800378e:	e7d9      	b.n	8003744 <__sfp+0x1c>
 8003790:	2104      	movs	r1, #4
 8003792:	4638      	mov	r0, r7
 8003794:	f7ff ff62 	bl	800365c <__sfmoreglue>
 8003798:	4604      	mov	r4, r0
 800379a:	6030      	str	r0, [r6, #0]
 800379c:	2800      	cmp	r0, #0
 800379e:	d1d5      	bne.n	800374c <__sfp+0x24>
 80037a0:	f7ff ff78 	bl	8003694 <__sfp_lock_release>
 80037a4:	230c      	movs	r3, #12
 80037a6:	603b      	str	r3, [r7, #0]
 80037a8:	e7ee      	b.n	8003788 <__sfp+0x60>
 80037aa:	bf00      	nop
 80037ac:	08003b44 	.word	0x08003b44
 80037b0:	ffff0001 	.word	0xffff0001

080037b4 <_fwalk_reent>:
 80037b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037b8:	4606      	mov	r6, r0
 80037ba:	4688      	mov	r8, r1
 80037bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80037c0:	2700      	movs	r7, #0
 80037c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80037c6:	f1b9 0901 	subs.w	r9, r9, #1
 80037ca:	d505      	bpl.n	80037d8 <_fwalk_reent+0x24>
 80037cc:	6824      	ldr	r4, [r4, #0]
 80037ce:	2c00      	cmp	r4, #0
 80037d0:	d1f7      	bne.n	80037c2 <_fwalk_reent+0xe>
 80037d2:	4638      	mov	r0, r7
 80037d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037d8:	89ab      	ldrh	r3, [r5, #12]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d907      	bls.n	80037ee <_fwalk_reent+0x3a>
 80037de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80037e2:	3301      	adds	r3, #1
 80037e4:	d003      	beq.n	80037ee <_fwalk_reent+0x3a>
 80037e6:	4629      	mov	r1, r5
 80037e8:	4630      	mov	r0, r6
 80037ea:	47c0      	blx	r8
 80037ec:	4307      	orrs	r7, r0
 80037ee:	3568      	adds	r5, #104	; 0x68
 80037f0:	e7e9      	b.n	80037c6 <_fwalk_reent+0x12>

080037f2 <__retarget_lock_init_recursive>:
 80037f2:	4770      	bx	lr

080037f4 <__retarget_lock_acquire_recursive>:
 80037f4:	4770      	bx	lr

080037f6 <__retarget_lock_release_recursive>:
 80037f6:	4770      	bx	lr

080037f8 <__swhatbuf_r>:
 80037f8:	b570      	push	{r4, r5, r6, lr}
 80037fa:	460e      	mov	r6, r1
 80037fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003800:	2900      	cmp	r1, #0
 8003802:	b096      	sub	sp, #88	; 0x58
 8003804:	4614      	mov	r4, r2
 8003806:	461d      	mov	r5, r3
 8003808:	da07      	bge.n	800381a <__swhatbuf_r+0x22>
 800380a:	2300      	movs	r3, #0
 800380c:	602b      	str	r3, [r5, #0]
 800380e:	89b3      	ldrh	r3, [r6, #12]
 8003810:	061a      	lsls	r2, r3, #24
 8003812:	d410      	bmi.n	8003836 <__swhatbuf_r+0x3e>
 8003814:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003818:	e00e      	b.n	8003838 <__swhatbuf_r+0x40>
 800381a:	466a      	mov	r2, sp
 800381c:	f000 f938 	bl	8003a90 <_fstat_r>
 8003820:	2800      	cmp	r0, #0
 8003822:	dbf2      	blt.n	800380a <__swhatbuf_r+0x12>
 8003824:	9a01      	ldr	r2, [sp, #4]
 8003826:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800382a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800382e:	425a      	negs	r2, r3
 8003830:	415a      	adcs	r2, r3
 8003832:	602a      	str	r2, [r5, #0]
 8003834:	e7ee      	b.n	8003814 <__swhatbuf_r+0x1c>
 8003836:	2340      	movs	r3, #64	; 0x40
 8003838:	2000      	movs	r0, #0
 800383a:	6023      	str	r3, [r4, #0]
 800383c:	b016      	add	sp, #88	; 0x58
 800383e:	bd70      	pop	{r4, r5, r6, pc}

08003840 <malloc>:
 8003840:	4b02      	ldr	r3, [pc, #8]	; (800384c <malloc+0xc>)
 8003842:	4601      	mov	r1, r0
 8003844:	6818      	ldr	r0, [r3, #0]
 8003846:	f000 b853 	b.w	80038f0 <_malloc_r>
 800384a:	bf00      	nop
 800384c:	2000000c 	.word	0x2000000c

08003850 <_free_r>:
 8003850:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003852:	2900      	cmp	r1, #0
 8003854:	d048      	beq.n	80038e8 <_free_r+0x98>
 8003856:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800385a:	9001      	str	r0, [sp, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	f1a1 0404 	sub.w	r4, r1, #4
 8003862:	bfb8      	it	lt
 8003864:	18e4      	addlt	r4, r4, r3
 8003866:	f000 f937 	bl	8003ad8 <__malloc_lock>
 800386a:	4a20      	ldr	r2, [pc, #128]	; (80038ec <_free_r+0x9c>)
 800386c:	9801      	ldr	r0, [sp, #4]
 800386e:	6813      	ldr	r3, [r2, #0]
 8003870:	4615      	mov	r5, r2
 8003872:	b933      	cbnz	r3, 8003882 <_free_r+0x32>
 8003874:	6063      	str	r3, [r4, #4]
 8003876:	6014      	str	r4, [r2, #0]
 8003878:	b003      	add	sp, #12
 800387a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800387e:	f000 b931 	b.w	8003ae4 <__malloc_unlock>
 8003882:	42a3      	cmp	r3, r4
 8003884:	d90b      	bls.n	800389e <_free_r+0x4e>
 8003886:	6821      	ldr	r1, [r4, #0]
 8003888:	1862      	adds	r2, r4, r1
 800388a:	4293      	cmp	r3, r2
 800388c:	bf04      	itt	eq
 800388e:	681a      	ldreq	r2, [r3, #0]
 8003890:	685b      	ldreq	r3, [r3, #4]
 8003892:	6063      	str	r3, [r4, #4]
 8003894:	bf04      	itt	eq
 8003896:	1852      	addeq	r2, r2, r1
 8003898:	6022      	streq	r2, [r4, #0]
 800389a:	602c      	str	r4, [r5, #0]
 800389c:	e7ec      	b.n	8003878 <_free_r+0x28>
 800389e:	461a      	mov	r2, r3
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	b10b      	cbz	r3, 80038a8 <_free_r+0x58>
 80038a4:	42a3      	cmp	r3, r4
 80038a6:	d9fa      	bls.n	800389e <_free_r+0x4e>
 80038a8:	6811      	ldr	r1, [r2, #0]
 80038aa:	1855      	adds	r5, r2, r1
 80038ac:	42a5      	cmp	r5, r4
 80038ae:	d10b      	bne.n	80038c8 <_free_r+0x78>
 80038b0:	6824      	ldr	r4, [r4, #0]
 80038b2:	4421      	add	r1, r4
 80038b4:	1854      	adds	r4, r2, r1
 80038b6:	42a3      	cmp	r3, r4
 80038b8:	6011      	str	r1, [r2, #0]
 80038ba:	d1dd      	bne.n	8003878 <_free_r+0x28>
 80038bc:	681c      	ldr	r4, [r3, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	6053      	str	r3, [r2, #4]
 80038c2:	4421      	add	r1, r4
 80038c4:	6011      	str	r1, [r2, #0]
 80038c6:	e7d7      	b.n	8003878 <_free_r+0x28>
 80038c8:	d902      	bls.n	80038d0 <_free_r+0x80>
 80038ca:	230c      	movs	r3, #12
 80038cc:	6003      	str	r3, [r0, #0]
 80038ce:	e7d3      	b.n	8003878 <_free_r+0x28>
 80038d0:	6825      	ldr	r5, [r4, #0]
 80038d2:	1961      	adds	r1, r4, r5
 80038d4:	428b      	cmp	r3, r1
 80038d6:	bf04      	itt	eq
 80038d8:	6819      	ldreq	r1, [r3, #0]
 80038da:	685b      	ldreq	r3, [r3, #4]
 80038dc:	6063      	str	r3, [r4, #4]
 80038de:	bf04      	itt	eq
 80038e0:	1949      	addeq	r1, r1, r5
 80038e2:	6021      	streq	r1, [r4, #0]
 80038e4:	6054      	str	r4, [r2, #4]
 80038e6:	e7c7      	b.n	8003878 <_free_r+0x28>
 80038e8:	b003      	add	sp, #12
 80038ea:	bd30      	pop	{r4, r5, pc}
 80038ec:	200001b8 	.word	0x200001b8

080038f0 <_malloc_r>:
 80038f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038f2:	1ccd      	adds	r5, r1, #3
 80038f4:	f025 0503 	bic.w	r5, r5, #3
 80038f8:	3508      	adds	r5, #8
 80038fa:	2d0c      	cmp	r5, #12
 80038fc:	bf38      	it	cc
 80038fe:	250c      	movcc	r5, #12
 8003900:	2d00      	cmp	r5, #0
 8003902:	4606      	mov	r6, r0
 8003904:	db01      	blt.n	800390a <_malloc_r+0x1a>
 8003906:	42a9      	cmp	r1, r5
 8003908:	d903      	bls.n	8003912 <_malloc_r+0x22>
 800390a:	230c      	movs	r3, #12
 800390c:	6033      	str	r3, [r6, #0]
 800390e:	2000      	movs	r0, #0
 8003910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003912:	f000 f8e1 	bl	8003ad8 <__malloc_lock>
 8003916:	4921      	ldr	r1, [pc, #132]	; (800399c <_malloc_r+0xac>)
 8003918:	680a      	ldr	r2, [r1, #0]
 800391a:	4614      	mov	r4, r2
 800391c:	b99c      	cbnz	r4, 8003946 <_malloc_r+0x56>
 800391e:	4f20      	ldr	r7, [pc, #128]	; (80039a0 <_malloc_r+0xb0>)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	b923      	cbnz	r3, 800392e <_malloc_r+0x3e>
 8003924:	4621      	mov	r1, r4
 8003926:	4630      	mov	r0, r6
 8003928:	f000 f83c 	bl	80039a4 <_sbrk_r>
 800392c:	6038      	str	r0, [r7, #0]
 800392e:	4629      	mov	r1, r5
 8003930:	4630      	mov	r0, r6
 8003932:	f000 f837 	bl	80039a4 <_sbrk_r>
 8003936:	1c43      	adds	r3, r0, #1
 8003938:	d123      	bne.n	8003982 <_malloc_r+0x92>
 800393a:	230c      	movs	r3, #12
 800393c:	6033      	str	r3, [r6, #0]
 800393e:	4630      	mov	r0, r6
 8003940:	f000 f8d0 	bl	8003ae4 <__malloc_unlock>
 8003944:	e7e3      	b.n	800390e <_malloc_r+0x1e>
 8003946:	6823      	ldr	r3, [r4, #0]
 8003948:	1b5b      	subs	r3, r3, r5
 800394a:	d417      	bmi.n	800397c <_malloc_r+0x8c>
 800394c:	2b0b      	cmp	r3, #11
 800394e:	d903      	bls.n	8003958 <_malloc_r+0x68>
 8003950:	6023      	str	r3, [r4, #0]
 8003952:	441c      	add	r4, r3
 8003954:	6025      	str	r5, [r4, #0]
 8003956:	e004      	b.n	8003962 <_malloc_r+0x72>
 8003958:	6863      	ldr	r3, [r4, #4]
 800395a:	42a2      	cmp	r2, r4
 800395c:	bf0c      	ite	eq
 800395e:	600b      	streq	r3, [r1, #0]
 8003960:	6053      	strne	r3, [r2, #4]
 8003962:	4630      	mov	r0, r6
 8003964:	f000 f8be 	bl	8003ae4 <__malloc_unlock>
 8003968:	f104 000b 	add.w	r0, r4, #11
 800396c:	1d23      	adds	r3, r4, #4
 800396e:	f020 0007 	bic.w	r0, r0, #7
 8003972:	1ac2      	subs	r2, r0, r3
 8003974:	d0cc      	beq.n	8003910 <_malloc_r+0x20>
 8003976:	1a1b      	subs	r3, r3, r0
 8003978:	50a3      	str	r3, [r4, r2]
 800397a:	e7c9      	b.n	8003910 <_malloc_r+0x20>
 800397c:	4622      	mov	r2, r4
 800397e:	6864      	ldr	r4, [r4, #4]
 8003980:	e7cc      	b.n	800391c <_malloc_r+0x2c>
 8003982:	1cc4      	adds	r4, r0, #3
 8003984:	f024 0403 	bic.w	r4, r4, #3
 8003988:	42a0      	cmp	r0, r4
 800398a:	d0e3      	beq.n	8003954 <_malloc_r+0x64>
 800398c:	1a21      	subs	r1, r4, r0
 800398e:	4630      	mov	r0, r6
 8003990:	f000 f808 	bl	80039a4 <_sbrk_r>
 8003994:	3001      	adds	r0, #1
 8003996:	d1dd      	bne.n	8003954 <_malloc_r+0x64>
 8003998:	e7cf      	b.n	800393a <_malloc_r+0x4a>
 800399a:	bf00      	nop
 800399c:	200001b8 	.word	0x200001b8
 80039a0:	200001bc 	.word	0x200001bc

080039a4 <_sbrk_r>:
 80039a4:	b538      	push	{r3, r4, r5, lr}
 80039a6:	4d06      	ldr	r5, [pc, #24]	; (80039c0 <_sbrk_r+0x1c>)
 80039a8:	2300      	movs	r3, #0
 80039aa:	4604      	mov	r4, r0
 80039ac:	4608      	mov	r0, r1
 80039ae:	602b      	str	r3, [r5, #0]
 80039b0:	f7fd f9bc 	bl	8000d2c <_sbrk>
 80039b4:	1c43      	adds	r3, r0, #1
 80039b6:	d102      	bne.n	80039be <_sbrk_r+0x1a>
 80039b8:	682b      	ldr	r3, [r5, #0]
 80039ba:	b103      	cbz	r3, 80039be <_sbrk_r+0x1a>
 80039bc:	6023      	str	r3, [r4, #0]
 80039be:	bd38      	pop	{r3, r4, r5, pc}
 80039c0:	200001d0 	.word	0x200001d0

080039c4 <__sread>:
 80039c4:	b510      	push	{r4, lr}
 80039c6:	460c      	mov	r4, r1
 80039c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039cc:	f000 f890 	bl	8003af0 <_read_r>
 80039d0:	2800      	cmp	r0, #0
 80039d2:	bfab      	itete	ge
 80039d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80039d6:	89a3      	ldrhlt	r3, [r4, #12]
 80039d8:	181b      	addge	r3, r3, r0
 80039da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80039de:	bfac      	ite	ge
 80039e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80039e2:	81a3      	strhlt	r3, [r4, #12]
 80039e4:	bd10      	pop	{r4, pc}

080039e6 <__swrite>:
 80039e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039ea:	461f      	mov	r7, r3
 80039ec:	898b      	ldrh	r3, [r1, #12]
 80039ee:	05db      	lsls	r3, r3, #23
 80039f0:	4605      	mov	r5, r0
 80039f2:	460c      	mov	r4, r1
 80039f4:	4616      	mov	r6, r2
 80039f6:	d505      	bpl.n	8003a04 <__swrite+0x1e>
 80039f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039fc:	2302      	movs	r3, #2
 80039fe:	2200      	movs	r2, #0
 8003a00:	f000 f858 	bl	8003ab4 <_lseek_r>
 8003a04:	89a3      	ldrh	r3, [r4, #12]
 8003a06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a0e:	81a3      	strh	r3, [r4, #12]
 8003a10:	4632      	mov	r2, r6
 8003a12:	463b      	mov	r3, r7
 8003a14:	4628      	mov	r0, r5
 8003a16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a1a:	f000 b817 	b.w	8003a4c <_write_r>

08003a1e <__sseek>:
 8003a1e:	b510      	push	{r4, lr}
 8003a20:	460c      	mov	r4, r1
 8003a22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a26:	f000 f845 	bl	8003ab4 <_lseek_r>
 8003a2a:	1c43      	adds	r3, r0, #1
 8003a2c:	89a3      	ldrh	r3, [r4, #12]
 8003a2e:	bf15      	itete	ne
 8003a30:	6560      	strne	r0, [r4, #84]	; 0x54
 8003a32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003a36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003a3a:	81a3      	strheq	r3, [r4, #12]
 8003a3c:	bf18      	it	ne
 8003a3e:	81a3      	strhne	r3, [r4, #12]
 8003a40:	bd10      	pop	{r4, pc}

08003a42 <__sclose>:
 8003a42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a46:	f000 b813 	b.w	8003a70 <_close_r>
	...

08003a4c <_write_r>:
 8003a4c:	b538      	push	{r3, r4, r5, lr}
 8003a4e:	4d07      	ldr	r5, [pc, #28]	; (8003a6c <_write_r+0x20>)
 8003a50:	4604      	mov	r4, r0
 8003a52:	4608      	mov	r0, r1
 8003a54:	4611      	mov	r1, r2
 8003a56:	2200      	movs	r2, #0
 8003a58:	602a      	str	r2, [r5, #0]
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	f7fd f952 	bl	8000d04 <_write>
 8003a60:	1c43      	adds	r3, r0, #1
 8003a62:	d102      	bne.n	8003a6a <_write_r+0x1e>
 8003a64:	682b      	ldr	r3, [r5, #0]
 8003a66:	b103      	cbz	r3, 8003a6a <_write_r+0x1e>
 8003a68:	6023      	str	r3, [r4, #0]
 8003a6a:	bd38      	pop	{r3, r4, r5, pc}
 8003a6c:	200001d0 	.word	0x200001d0

08003a70 <_close_r>:
 8003a70:	b538      	push	{r3, r4, r5, lr}
 8003a72:	4d06      	ldr	r5, [pc, #24]	; (8003a8c <_close_r+0x1c>)
 8003a74:	2300      	movs	r3, #0
 8003a76:	4604      	mov	r4, r0
 8003a78:	4608      	mov	r0, r1
 8003a7a:	602b      	str	r3, [r5, #0]
 8003a7c:	f7fd f919 	bl	8000cb2 <_close>
 8003a80:	1c43      	adds	r3, r0, #1
 8003a82:	d102      	bne.n	8003a8a <_close_r+0x1a>
 8003a84:	682b      	ldr	r3, [r5, #0]
 8003a86:	b103      	cbz	r3, 8003a8a <_close_r+0x1a>
 8003a88:	6023      	str	r3, [r4, #0]
 8003a8a:	bd38      	pop	{r3, r4, r5, pc}
 8003a8c:	200001d0 	.word	0x200001d0

08003a90 <_fstat_r>:
 8003a90:	b538      	push	{r3, r4, r5, lr}
 8003a92:	4d07      	ldr	r5, [pc, #28]	; (8003ab0 <_fstat_r+0x20>)
 8003a94:	2300      	movs	r3, #0
 8003a96:	4604      	mov	r4, r0
 8003a98:	4608      	mov	r0, r1
 8003a9a:	4611      	mov	r1, r2
 8003a9c:	602b      	str	r3, [r5, #0]
 8003a9e:	f7fd f914 	bl	8000cca <_fstat>
 8003aa2:	1c43      	adds	r3, r0, #1
 8003aa4:	d102      	bne.n	8003aac <_fstat_r+0x1c>
 8003aa6:	682b      	ldr	r3, [r5, #0]
 8003aa8:	b103      	cbz	r3, 8003aac <_fstat_r+0x1c>
 8003aaa:	6023      	str	r3, [r4, #0]
 8003aac:	bd38      	pop	{r3, r4, r5, pc}
 8003aae:	bf00      	nop
 8003ab0:	200001d0 	.word	0x200001d0

08003ab4 <_lseek_r>:
 8003ab4:	b538      	push	{r3, r4, r5, lr}
 8003ab6:	4d07      	ldr	r5, [pc, #28]	; (8003ad4 <_lseek_r+0x20>)
 8003ab8:	4604      	mov	r4, r0
 8003aba:	4608      	mov	r0, r1
 8003abc:	4611      	mov	r1, r2
 8003abe:	2200      	movs	r2, #0
 8003ac0:	602a      	str	r2, [r5, #0]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	f7fd f911 	bl	8000cea <_lseek>
 8003ac8:	1c43      	adds	r3, r0, #1
 8003aca:	d102      	bne.n	8003ad2 <_lseek_r+0x1e>
 8003acc:	682b      	ldr	r3, [r5, #0]
 8003ace:	b103      	cbz	r3, 8003ad2 <_lseek_r+0x1e>
 8003ad0:	6023      	str	r3, [r4, #0]
 8003ad2:	bd38      	pop	{r3, r4, r5, pc}
 8003ad4:	200001d0 	.word	0x200001d0

08003ad8 <__malloc_lock>:
 8003ad8:	4801      	ldr	r0, [pc, #4]	; (8003ae0 <__malloc_lock+0x8>)
 8003ada:	f7ff be8b 	b.w	80037f4 <__retarget_lock_acquire_recursive>
 8003ade:	bf00      	nop
 8003ae0:	200001c8 	.word	0x200001c8

08003ae4 <__malloc_unlock>:
 8003ae4:	4801      	ldr	r0, [pc, #4]	; (8003aec <__malloc_unlock+0x8>)
 8003ae6:	f7ff be86 	b.w	80037f6 <__retarget_lock_release_recursive>
 8003aea:	bf00      	nop
 8003aec:	200001c8 	.word	0x200001c8

08003af0 <_read_r>:
 8003af0:	b538      	push	{r3, r4, r5, lr}
 8003af2:	4d07      	ldr	r5, [pc, #28]	; (8003b10 <_read_r+0x20>)
 8003af4:	4604      	mov	r4, r0
 8003af6:	4608      	mov	r0, r1
 8003af8:	4611      	mov	r1, r2
 8003afa:	2200      	movs	r2, #0
 8003afc:	602a      	str	r2, [r5, #0]
 8003afe:	461a      	mov	r2, r3
 8003b00:	f7fd f8ba 	bl	8000c78 <_read>
 8003b04:	1c43      	adds	r3, r0, #1
 8003b06:	d102      	bne.n	8003b0e <_read_r+0x1e>
 8003b08:	682b      	ldr	r3, [r5, #0]
 8003b0a:	b103      	cbz	r3, 8003b0e <_read_r+0x1e>
 8003b0c:	6023      	str	r3, [r4, #0]
 8003b0e:	bd38      	pop	{r3, r4, r5, pc}
 8003b10:	200001d0 	.word	0x200001d0

08003b14 <_init>:
 8003b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b16:	bf00      	nop
 8003b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b1a:	bc08      	pop	{r3}
 8003b1c:	469e      	mov	lr, r3
 8003b1e:	4770      	bx	lr

08003b20 <_fini>:
 8003b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b22:	bf00      	nop
 8003b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b26:	bc08      	pop	{r3}
 8003b28:	469e      	mov	lr, r3
 8003b2a:	4770      	bx	lr
